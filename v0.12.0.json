{"types":[["git_blob",{"type":"struct","used":{"returns":[],"needs":["git_blob_close","git_blob_lookup","git_blob_rawcontent","git_blob_rawsize"]},"line":116,"value":"git_blob","file":"types.h","tdef":"typedef"}],["git_commit",{"type":"struct","used":{"returns":[],"needs":["git_commit_author","git_commit_close","git_commit_committer","git_commit_create_o","git_commit_id","git_commit_lookup","git_commit_message","git_commit_message_short","git_commit_parent","git_commit_parent_oid","git_commit_parentcount","git_commit_time","git_commit_time_offset","git_commit_tree","git_commit_tree_oid"]},"line":119,"value":"git_commit","file":"types.h","tdef":"typedef"}],["git_index",{"type":"struct","used":{"returns":[],"needs":["git_index_add","git_index_append","git_index_clear","git_index_entrycount","git_index_find","git_index_free","git_index_get","git_index_open_bare","git_index_open_inrepo","git_index_read","git_index_remove","git_index_write","git_repository_index","git_tree_create_fromindex"]},"line":131,"value":"git_index","file":"types.h","tdef":"typedef"}],["git_index_entry",{"type":"struct","used":{"returns":["git_index_get"],"needs":[]},"lineto":102,"line":85,"value":null,"file":"index.h","tdef":"typedef","block":"git_index_time ctime;\ngit_index_time mtime;\n\nunsigned int dev;\nunsigned int ino;\nunsigned int mode;\nunsigned int uid;\nunsigned int gid;\ngit_off_t file_size;\n\ngit_oid oid;\n\nunsigned short flags;\nunsigned short flags_extended;\n\nchar *path;\n"}],["git_index_time",{"type":"struct","used":{"returns":[],"needs":[]},"lineto":82,"line":78,"value":null,"file":"index.h","tdef":"typedef","block":"git_time_t seconds;\n/* nsec should not be stored as time_t compatible */\nunsigned int nanoseconds;\n"}],["git_object",{"type":"struct","used":{"returns":[],"needs":["git_object_close","git_object_id","git_object_lookup","git_object_owner","git_object_type","git_tag_create_fo","git_tag_create_o","git_tag_target"]},"line":107,"value":"git_object","file":"types.h","tdef":"typedef"}],["git_odb",{"type":"struct","used":{"returns":["git_repository_database"],"needs":["git_odb_add_alternate","git_odb_add_backend","git_odb_close","git_odb_exists","git_odb_new","git_odb_open","git_odb_open_rstream","git_odb_open_wstream","git_odb_read","git_odb_read_header","git_odb_write"]},"line":89,"value":"git_odb","file":"types.h","tdef":"typedef"}],["git_odb_backend",{"type":"struct","used":{"returns":[],"needs":["git_odb_add_alternate","git_odb_add_backend","git_odb_backend_loose","git_odb_backend_pack","git_odb_backend_sqlite"]},"line":92,"value":"git_odb_backend","file":"types.h","tdef":"typedef"}],["git_odb_object",{"type":"struct","used":{"returns":[],"needs":["git_odb_object_close","git_odb_object_data","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_read"]},"line":95,"value":"git_odb_object","file":"types.h","tdef":"typedef"}],["git_odb_stream",{"type":"struct","used":{"returns":[],"needs":["git_odb_open_rstream","git_odb_open_wstream"]},"line":98,"value":"git_odb_stream","file":"types.h","tdef":"typedef"}],["git_odb_streammode",{"type":"enum","used":{"returns":[],"needs":[]},"lineto":98,"line":94,"value":null,"file":"odb_backend.h","tdef":"typedef","block":"GIT_STREAM_RDONLY = (1 << 1),\nGIT_STREAM_WRONLY = (1 << 2),\nGIT_STREAM_RW = (GIT_STREAM_RDONLY | GIT_STREAM_WRONLY),\n"}],["git_oid",{"type":"struct","used":{"returns":["git_commit_id","git_commit_parent_oid","git_commit_tree_oid","git_object_id","git_odb_object_id","git_reference_oid","git_tag_id","git_tag_target_oid","git_tree_entry_id","git_tree_id"],"needs":["git_blob_create_frombuffer","git_blob_create_fromfile","git_blob_lookup","git_commit_create","git_commit_create_o","git_commit_create_ov","git_commit_create_v","git_commit_lookup","git_object_lookup","git_odb_exists","git_odb_hash","git_odb_open_rstream","git_odb_read","git_odb_read_header","git_odb_write","git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_mkraw","git_oid_mkstr","git_oid_pathfmt","git_oid_to_string","git_reference_create_oid","git_reference_create_oid_f","git_reference_set_oid","git_revwalk_hide","git_revwalk_next","git_revwalk_push","git_tag_create","git_tag_create_f","git_tag_create_fo","git_tag_create_frombuffer","git_tag_create_o","git_tag_lookup","git_tree_create_fromindex","git_tree_lookup","git_treebuilder_insert","git_treebuilder_write"]},"lineto":50,"line":47,"value":null,"file":"oid.h","tdef":"typedef","block":"/** raw binary formatted id */\nunsigned char id[GIT_OID_RAWSZ];\n"}],["git_oid_shorten",{"type":"struct","used":{"returns":[],"needs":["git_oid_shorten_add","git_oid_shorten_free"]},"line":138,"value":"git_oid_shorten","file":"oid.h","tdef":"typedef"}],["git_otype",{"type":"enum","used":{"returns":[],"needs":["git_object__size","git_object_lookup","git_object_typeisloose","git_odb_hash","git_odb_open_wstream","git_odb_read_header","git_odb_write","git_tag_create","git_tag_create_f"]},"lineto":86,"line":75,"value":null,"file":"types.h","tdef":"typedef","block":"GIT_OBJ_ANY = -2,\t\t/**< Object can be any of the following */\nGIT_OBJ_BAD = -1,       /**< Object is invalid. */\nGIT_OBJ__EXT1 = 0,      /**< Reserved for future use. */\nGIT_OBJ_COMMIT = 1,     /**< A commit object. */\nGIT_OBJ_TREE = 2,       /**< A tree (directory listing) object. */\nGIT_OBJ_BLOB = 3,       /**< A file revision object. */\nGIT_OBJ_TAG = 4,        /**< An annotated tag object. */\nGIT_OBJ__EXT2 = 5,      /**< Reserved for future use. */\nGIT_OBJ_OFS_DELTA = 6,  /**< A delta, base is given by an offset. */\nGIT_OBJ_REF_DELTA = 7,  /**< A delta, base is given by object id. */\n"}],["git_reference",{"type":"struct","used":{"returns":[],"needs":["git_reference_create_oid","git_reference_create_oid_f","git_reference_create_symbolic","git_reference_create_symbolic_f","git_reference_delete","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_rename","git_reference_rename_f","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type"]},"line":147,"value":"git_reference","file":"types.h","tdef":"typedef"}],["git_repository",{"type":"struct","used":{"returns":["git_object_owner","git_reference_owner","git_revwalk_repository"],"needs":["git_blob_create_frombuffer","git_blob_create_fromfile","git_blob_lookup","git_commit_create","git_commit_create_o","git_commit_create_ov","git_commit_create_v","git_commit_lookup","git_index_open_inrepo","git_object_lookup","git_reference_create_oid","git_reference_create_oid_f","git_reference_create_symbolic","git_reference_create_symbolic_f","git_reference_listall","git_reference_listcb","git_reference_lookup","git_reference_packall","git_repository_database","git_repository_free","git_repository_index","git_repository_init","git_repository_is_empty","git_repository_open","git_repository_path","git_repository_workdir","git_revwalk_new","git_tag_create","git_tag_create_f","git_tag_create_fo","git_tag_create_frombuffer","git_tag_create_o","git_tag_delete","git_tag_list","git_tag_lookup","git_tree_lookup","git_treebuilder_write"]},"line":104,"value":"git_repository","file":"types.h","tdef":"typedef"}],["git_revwalk",{"type":"struct","used":{"returns":[],"needs":["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]},"line":110,"value":"git_revwalk","file":"types.h","tdef":"typedef"}],["git_rtype",{"type":"enum","used":{"returns":[],"needs":[]},"lineto":157,"line":150,"value":null,"file":"types.h","tdef":"typedef","block":"GIT_REF_INVALID = 0, /** Invalid reference */\nGIT_REF_OID = 1, /** A reference which points at an object id */\nGIT_REF_SYMBOLIC = 2, /** A reference which points at another reference */\nGIT_REF_PACKED = 4,\nGIT_REF_HAS_PEEL = 8,\nGIT_REF_LISTALL = GIT_REF_OID|GIT_REF_SYMBOLIC|GIT_REF_PACKED,\n"}],["git_signature",{"type":"struct","used":{"returns":["git_commit_author","git_commit_committer","git_signature_dup","git_signature_new","git_signature_now","git_tag_tagger"],"needs":["git_commit_create","git_commit_create_o","git_commit_create_ov","git_commit_create_v","git_signature_dup","git_signature_free","git_tag_create","git_tag_create_f","git_tag_create_fo","git_tag_create_o"]},"lineto":144,"line":140,"value":null,"file":"types.h","tdef":"typedef","block":"char *name; /** full name of the author */\nchar *email; /** email of the author */\ngit_time when; /** time when the action happened */\n"}],["git_strarray",{"type":"struct","used":{"returns":[],"needs":["git_reference_listall","git_strarray_free","git_tag_list"]},"lineto":92,"line":89,"value":null,"file":"common.h","tdef":"typedef","block":"char **strings;\nsize_t count;\n"}],["git_tag",{"type":"struct","used":{"returns":[],"needs":["git_tag_close","git_tag_id","git_tag_lookup","git_tag_message","git_tag_name","git_tag_tagger","git_tag_target","git_tag_target_oid","git_tag_type"]},"line":113,"value":"git_tag","file":"types.h","tdef":"typedef"}],["git_time",{"type":"struct","used":{"returns":[],"needs":[]},"lineto":137,"line":134,"value":null,"file":"types.h","tdef":"typedef","block":"git_time_t time; /** time in seconds from epoch */\nint offset; /** timezone offset, in minutes */\n"}],["git_tree",{"type":"struct","used":{"returns":[],"needs":["git_commit_create_o","git_commit_create_ov","git_commit_tree","git_tree_close","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entrycount","git_tree_id","git_tree_lookup","git_treebuilder_create"]},"line":125,"value":"git_tree","file":"types.h","tdef":"typedef"}],["git_tree_entry",{"type":"struct","used":{"returns":["git_tree_entry_byindex","git_tree_entry_byname","git_treebuilder_get"],"needs":["git_tree_entry_attributes","git_tree_entry_id","git_tree_entry_name","git_treebuilder_filter","git_treebuilder_insert"]},"line":122,"value":"git_tree_entry","file":"types.h","tdef":"typedef"}],["git_treebuilder",{"type":"struct","used":{"returns":[],"needs":["git_treebuilder_clear","git_treebuilder_create","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write"]},"line":128,"value":"git_treebuilder","file":"types.h","tdef":"typedef"}]],"files":[{"lines":121,"file":"blob.h","functions":["git_blob_lookup","git_blob_close","git_blob_rawcontent","git_blob_rawsize","git_blob_create_fromfile","git_blob_create_frombuffer"],"meta":{"file":"git2/blob.h","brief":"Git blob load and write routines","defgroup":"git_blob Git blob load and write routines","ingroup":"Git"}},{"lines":302,"file":"commit.h","functions":["git_commit_lookup","git_commit_close","git_commit_id","git_commit_message_short","git_commit_message","git_commit_time","git_commit_time_offset","git_commit_committer","git_commit_author","git_commit_tree","git_commit_tree_oid","git_commit_parentcount","git_commit_parent","git_commit_parent_oid","git_commit_create","git_commit_create_o","git_commit_create_ov","git_commit_create_v"],"meta":{"file":"git2/commit.h","brief":"Git commit parsing, formatting routines","defgroup":"git_commit Git commit parsing, formatting routines","ingroup":"Git"}},{"lines":98,"file":"common.h","functions":["__attribute__","__attribute__","git_strarray_free"],"meta":{"file":"git2/common.h","brief":"Git common platform definitions","defgroup":"git_common Git common platform definitions","ingroup":"Git"}},{"lines":149,"file":"errors.h","functions":["git_lasterror","git_strerror"],"meta":{"file":"git2/errors.h","brief":"Git error handling routines and variables","defgroup":null,"ingroup":"Git"}},{"lines":270,"file":"index.h","functions":["git_index_open_bare","git_index_open_inrepo","git_index_clear","git_index_free","git_index_read","git_index_write","git_index_find","git_index_add","git_index_append","git_index_remove","git_index_get","git_index_entrycount"],"meta":{"file":"git2/index.h","brief":"Git index parsing and manipulation routines","defgroup":"git_index Git index parsing and manipulation routines","ingroup":"Git"}},{"lines":147,"file":"object.h","functions":["git_object_lookup","git_object_id","git_object_type","git_object_owner","git_object_close","git_object_typeisloose","git_object__size"],"meta":{"file":"git2/object.h","brief":"Git revision object management routines","defgroup":"git_object Git revision object management routines","ingroup":"Git"}},{"lines":302,"file":"odb.h","functions":["git_odb_new","git_odb_open","git_odb_add_backend","git_odb_add_alternate","git_odb_close","git_odb_read","git_odb_read_header","git_odb_exists","git_odb_write","git_odb_open_wstream","git_odb_open_rstream","git_odb_hash","git_odb_object_close","git_odb_object_id","git_odb_object_data","git_odb_object_size","git_odb_object_type"],"meta":{"file":"git2/odb.h","brief":"Git object database routines","defgroup":"git_odb Git object database routines","ingroup":"Git"}},{"lines":107,"file":"odb_backend.h","functions":["git_odb_backend_pack","git_odb_backend_loose","git_odb_backend_sqlite"],"meta":{"file":"git2/backend.h","brief":"Git custom backend functions","defgroup":"git_backend Git custom backend API","ingroup":"Git"}},{"lines":191,"file":"oid.h","functions":["git_oid_mkstr","git_oid_mkraw","git_oid_fmt","git_oid_pathfmt","git_oid_allocfmt","git_oid_to_string","git_oid_cpy","git_oid_cmp","git_oid_shorten_add","git_oid_shorten_free"],"meta":{"file":"git2/oid.h","brief":"Git object id routines","defgroup":"git_oid Git object id routines","ingroup":"Git"}},{"lines":325,"file":"refs.h","functions":["git_reference_lookup","git_reference_create_symbolic","git_reference_create_symbolic_f","git_reference_create_oid","git_reference_create_oid_f","git_reference_oid","git_reference_target","git_reference_type","git_reference_name","git_reference_resolve","git_reference_owner","git_reference_set_target","git_reference_set_oid","git_reference_rename","git_reference_rename_f","git_reference_delete","git_reference_packall","git_reference_listall","git_reference_listcb"],"meta":{"file":"git2/refs.h","brief":"Git reference management routines","defgroup":"git_reference Git reference management routines","ingroup":"Git"}},{"lines":217,"file":"repository.h","functions":["git_repository_open","git_repository_database","git_repository_index","git_repository_free","git_repository_init","git_repository_is_empty","git_repository_path","git_repository_workdir"],"meta":{"file":"git2/repository.h","brief":"Git repository management routines","defgroup":"git_repository Git repository management routines","ingroup":"Git"}},{"lines":187,"file":"revwalk.h","functions":["git_revwalk_new","git_revwalk_reset","git_revwalk_push","git_revwalk_hide","git_revwalk_next","git_revwalk_sorting","git_revwalk_free","git_revwalk_repository"],"meta":{"file":"git2/revwalk.h","brief":"Git revision traversal routines","defgroup":"git_revwalk Git revision traversal routines","ingroup":"Git"}},{"lines":81,"file":"signature.h","functions":["git_signature_new","git_signature_now","git_signature_dup","git_signature_free"],"meta":{"file":"git2/signature.h","brief":"Git signature creation","defgroup":"git_signature Git signature creation","ingroup":"Git"}},{"lines":297,"file":"tag.h","functions":["git_tag_lookup","git_tag_close","git_tag_id","git_tag_target","git_tag_target_oid","git_tag_type","git_tag_name","git_tag_tagger","git_tag_message","git_tag_create","git_tag_create_o","git_tag_create_frombuffer","git_tag_create_f","git_tag_create_fo","git_tag_delete","git_tag_list"],"meta":{"file":"git2/tag.h","brief":"Git tag parsing routines","defgroup":"git_tag Git tag management","ingroup":"Git"}},{"lines":71,"file":"thread-utils.h","functions":[],"meta":{"file":null,"brief":null,"defgroup":null,"ingroup":null}},{"lines":266,"file":"tree.h","functions":["git_tree_lookup","git_tree_close","git_tree_id","git_tree_entrycount","git_tree_entry_byname","git_tree_entry_byindex","git_tree_entry_attributes","git_tree_entry_name","git_tree_entry_id","git_tree_create_fromindex","git_treebuilder_create","git_treebuilder_clear","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_filter","git_treebuilder_write"],"meta":{"file":"git2/tree.h","brief":"Git tree parsing, loading routines","defgroup":"git_tree Git tree parsing, loading routines","ingroup":"Git"}},{"lines":162,"file":"types.h","functions":[],"meta":{"file":"git2/types.h","brief":"libgit2 base & compatibility types","defgroup":null,"ingroup":"Git"}},{"lines":58,"file":"zlib.h","functions":[],"meta":{"file":"git2/zlib.h","brief":"Git data compression routines","defgroup":"git_zlib Git data compression routines","ingroup":"Git"}}],"functions":{"git_treebuilder_insert":{"lineto":227,"line":208,"group":"treebuilder","rawComments":"\n Add or update an entry to the builder\n\n Insert a new entry for `filename` in the builder with the\n given attributes.\n\n if an entry named `filename` already exists, its attributes\n will be updated with the given ones.\n\n The optional pointer `entry_out` can be used to retrieve a\n pointer to the newly created/updated entry.\n\n @param entry_out Pointer to store the entry (optional)\n @param bld Tree builder\n @param filename Filename of the entry\n @param id SHA1 oid of the entry\n @param attributes Folder attributes of the entry\n @return 0 on success; error code otherwise\n\n","file":"tree.h","sig":"git_tree_entry **::git_treebuilder *::const char *::const git_oid *::unsigned int","args":[{"type":"git_tree_entry **","comment":"Pointer to store the entry (optional)","name":"entry_out"},{"type":"git_treebuilder *","comment":"Tree builder","name":"bld"},{"type":"const char *","comment":"Filename of the entry","name":"filename"},{"type":"const git_oid *","comment":"SHA1 oid of the entry","name":"id"},{"type":"unsigned int","comment":"Folder attributes of the entry","name":"attributes"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Insert a new entry for `filename` in the builder with the\n given attributes.\n\n if an entry named `filename` already exists, its attributes\n will be updated with the given ones.\n\n The optional pointer `entry_out` can be used to retrieve a\n pointer to the newly created/updated entry.","argline":"git_tree_entry **entry_out, git_treebuilder *bld, const char *filename, const git_oid *id, unsigned int attributes","description":"Add or update an entry to the builder"},"git_tag_close":{"lineto":70,"line":55,"group":"tag","rawComments":"\n Close an open tag\n\n This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a tag. Failure to do so will cause a memory leak.\n\n @param tag the tag to close\n\n","file":"tag.h","sig":"git_tag *","args":[{"type":"git_tag *","comment":"the tag to close","name":"tag"}],"return":{"type":"void","comment":""},"comments":"This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a tag. Failure to do so will cause a memory leak.","argline":"git_tag *tag","description":"Close an open tag"},"git_treebuilder_write":{"lineto":262,"line":250,"group":"treebuilder","rawComments":"\n Write the contents of the tree builder as a tree object\n\n The tree builder will be written to the given `repo`, and\n it's identifying SHA1 hash will be stored in the `oid`\n pointer.\n\n @param oid Pointer where to store the written OID\n @param repo Repository where to store the object\n @param bld Tree builder to write\n @return 0 on success; error code otherwise\n\n","file":"tree.h","sig":"git_oid *::git_repository *::git_treebuilder *","args":[{"type":"git_oid *","comment":"Pointer where to store the written OID","name":"oid"},{"type":"git_repository *","comment":"Repository where to store the object","name":"repo"},{"type":"git_treebuilder *","comment":"Tree builder to write","name":"bld"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The tree builder will be written to the given `repo`, and\n it's identifying SHA1 hash will be stored in the `oid`\n pointer.","argline":"git_oid *oid, git_repository *repo, git_treebuilder *bld","description":"Write the contents of the tree builder as a tree object"},"git_tree_entry_attributes":{"lineto":113,"line":107,"group":"tree","rawComments":"\n Get the UNIX file attributes of a tree entry\n\n @param entry a tree entry\n @return attributes as an integer\n\n","file":"tree.h","sig":"const git_tree_entry *","args":[{"type":"const git_tree_entry *","comment":"a tree entry","name":"entry"}],"return":{"type":"unsigned int","comment":"attributes as an integer"},"comments":"","argline":"const git_tree_entry *entry","description":"Get the UNIX file attributes of a tree entry"},"git_tag_delete":{"lineto":276,"line":264,"group":"tag","rawComments":"\n Delete an existing tag reference.\n\n @param repo Repository where lives the tag\n\n @param tag_name Name of the tag to be deleted;\n this name is validated for consistency.\n\n @return 0 on success; error code otherwise.\n\n","file":"tag.h","sig":"git_repository *::const char *","args":[{"type":"git_repository *","comment":"Repository where lives the tag","name":"repo"},{"type":"const char *","comment":"Name of the tag to be deleted;  this name is validated for consistency.","name":"tag_name"}],"return":{"type":"int","comment":"0 on success; error code otherwise."},"comments":"","argline":"git_repository *repo, const char *tag_name","description":"Delete an existing tag reference."},"git_commit_parentcount":{"lineto":154,"line":148,"group":"commit","rawComments":"\n Get the number of parents of this commit\n\n @param commit a previously loaded commit.\n @return integer of count of parents\n\n","file":"commit.h","sig":"git_commit *","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"return":{"type":"unsigned int","comment":"integer of count of parents"},"comments":"","argline":"git_commit *commit","description":"Get the number of parents of this commit"},"git_oid_mkstr":{"lineto":60,"line":52,"group":"oid","rawComments":"\n Parse a hex formatted object id into a git_oid.\n @param out oid structure the result is written into.\n @param str input hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes).\n @return GIT_SUCCESS if valid; GIT_ENOTOID on failure.\n\n","file":"oid.h","sig":"git_oid *::const char *","args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const char *","comment":"input hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (40 bytes).","name":"str"}],"return":{"type":"int","comment":"GIT_SUCCESS if valid; GIT_ENOTOID on failure."},"comments":"","argline":"git_oid *out, const char *str","description":"Parse a hex formatted object id into a git_oid."},"git_reference_create_oid":{"lineto":107,"line":92,"group":"reference","rawComments":"\n Create a new object id reference.\n\n The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.\n\n @param ref_out Pointer to the newly created reference\n @param repo Repository where that reference will live\n @param name The name of the reference\n @param id The object id pointed to by the reference.\n @return 0 on success; error code otherwise\n\n","file":"refs.h","sig":"git_reference **::git_repository *::const char *::const git_oid *","args":[{"type":"git_reference **","comment":"Pointer to the newly created reference","name":"ref_out"},{"type":"git_repository *","comment":"Repository where that reference will live","name":"repo"},{"type":"const char *","comment":"The name of the reference","name":"name"},{"type":"const git_oid *","comment":"The object id pointed to by the reference.","name":"id"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.","argline":"git_reference **ref_out, git_repository *repo, const char *name, const git_oid *id","description":"Create a new object id reference."},"git_tree_lookup":{"lineto":53,"line":42,"group":"tree","rawComments":"\n Lookup a tree object from the repository.\n\n @param tree pointer to the looked up tree\n @param repo the repo to use when locating the tree.\n @param id identity of the tree to locate.\n @return 0 on success; error code otherwise\n\n","file":"tree.h","sig":"git_tree **::git_repository *::const git_oid *","args":[{"type":"git_tree **","comment":"pointer to the looked up tree","name":"tree"},{"type":"git_repository *","comment":"the repo to use when locating the tree.","name":"repo"},{"type":"const git_oid *","comment":"identity of the tree to locate.","name":"id"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"","argline":"git_tree **tree, git_repository *repo, const git_oid *id","description":"Lookup a tree object from the repository."},"git_odb_open":{"lineto":72,"line":55,"group":"odb","rawComments":"\n Create a new object database and automatically add\n the two default backends:\n\n\t- git_odb_backend_loose: read and write loose object files\n\t\tfrom disk, assuming `objects_dir` as the Objects folder\n\n\t- git_odb_backend_pack: read objects from packfiles,\n\t\tassuming `objects_dir` as the Objects folder which\n\t\tcontains a 'pack/' folder with the corresponding data\n\n @param out location to store the database pointer, if opened.\n            Set to NULL if the open failed.\n @param objects_dir path of the backends' \"objects\" directory.\n @return GIT_SUCCESS if the database opened; otherwise an error\n         code describing why the open was not possible.\n\n","file":"odb.h","sig":"git_odb **::const char *","args":[{"type":"git_odb **","comment":"location to store the database pointer, if opened.             Set to NULL if the open failed.","name":"out"},{"type":"const char *","comment":"path of the backends' \"objects\" directory.","name":"objects_dir"}],"return":{"type":"int","comment":"GIT_SUCCESS if the database opened; otherwise an error          code describing why the open was not possible."},"comments":"- git_odb_backend_loose: read and write loose object files\n\t\tfrom disk, assuming `objects_dir` as the Objects folder\n\n\t- git_odb_backend_pack: read objects from packfiles,\n\t\tassuming `objects_dir` as the Objects folder which\n\t\tcontains a 'pack/' folder with the corresponding data","argline":"git_odb **out, const char *objects_dir","description":"Create a new object database and automatically add the two default backends:"},"git_reference_set_target":{"lineto":204,"line":191,"group":"reference","rawComments":"\n Set the symbolic target of a reference.\n\n The reference must be a symbolic reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.\n\n @param ref The reference\n @param target The new target for the reference\n @return 0 on success; error code otherwise\n\n","file":"refs.h","sig":"git_reference *::const char *","args":[{"type":"git_reference *","comment":"The reference","name":"ref"},{"type":"const char *","comment":"The new target for the reference","name":"target"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The reference must be a symbolic reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.","argline":"git_reference *ref, const char *target","description":"Set the symbolic target of a reference."},"git_commit_message":{"lineto":95,"line":89,"group":"commit","rawComments":"\n Get the full message of a commit.\n\n @param commit a previously loaded commit.\n @return the message of a commit\n\n","file":"commit.h","sig":"git_commit *","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"return":{"type":"const char *","comment":"the message of a commit"},"comments":"","argline":"git_commit *commit","description":"Get the full message of a commit."},"git_treebuilder_create":{"lineto":176,"line":159,"group":"treebuilder","rawComments":"\n Create a new tree builder.\n\n The tree builder can be used to create or modify\n trees in memory and write them as tree objects to the\n database.\n\n If the `source` parameter is not NULL, the tree builder\n will be initialized with the entries of the given tree.\n\n If the `source` parameter is NULL, the tree builder will\n have no entries and will have to be filled manually.\n\n @param builder_p Pointer where to store the tree builder\n @param source Source tree to initialize the builder (optional)\n @return 0 on sucess; error code otherwise\n\n","file":"tree.h","sig":"git_treebuilder **::const git_tree *","args":[{"type":"git_treebuilder **","comment":"Pointer where to store the tree builder","name":"builder_p"},{"type":"const git_tree *","comment":"Source tree to initialize the builder (optional)","name":"source"}],"return":{"type":"int","comment":"0 on sucess; error code otherwise"},"comments":"The tree builder can be used to create or modify\n trees in memory and write them as tree objects to the\n database.\n\n If the `source` parameter is not NULL, the tree builder\n will be initialized with the entries of the given tree.\n\n If the `source` parameter is NULL, the tree builder will\n have no entries and will have to be filled manually.","argline":"git_treebuilder **builder_p, const git_tree *source","description":"Create a new tree builder."},"git_commit_time_offset":{"lineto":111,"line":105,"group":"commit","rawComments":"\n Get the commit timezone offset (i.e. committer's preferred timezone) of a commit.\n\n @param commit a previously loaded commit.\n @return positive or negative timezone offset, in minutes from UTC\n\n","file":"commit.h","sig":"git_commit *","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"return":{"type":"int","comment":"positive or negative timezone offset, in minutes from UTC"},"comments":"","argline":"git_commit *commit","description":"Get the commit timezone offset (i.e. committer's preferred timezone) of a commit."},"git_revwalk_free":{"lineto":174,"line":169,"group":"revwalk","rawComments":"\n Free a revision walker previously allocated.\n\n @param walk traversal handle to close.  If NULL nothing occurs.\n\n","file":"revwalk.h","sig":"git_revwalk *","args":[{"type":"git_revwalk *","comment":"traversal handle to close.  If NULL nothing occurs.","name":"walk"}],"return":{"type":"void","comment":""},"comments":"","argline":"git_revwalk *walk","description":"Free a revision walker previously allocated."},"git_tree_close":{"lineto":70,"line":55,"group":"tree","rawComments":"\n Close an open tree\n\n This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a tree. Failure to do so will cause a memory leak.\n\n @param tree the tree to close\n\n","file":"tree.h","sig":"git_tree *","args":[{"type":"git_tree *","comment":"the tree to close","name":"tree"}],"return":{"type":"void","comment":""},"comments":"This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a tree. Failure to do so will cause a memory leak.","argline":"git_tree *tree","description":"Close an open tree"},"git_signature_dup":{"lineto":70,"line":63,"group":"signature","rawComments":"\n Create a copy of an existing signature.\n\n All internal strings are also duplicated.\n @param sig signature to duplicated\n @return a copy of sig, NULL on out of memory\n\n","file":"signature.h","sig":"const git_signature *","args":[{"type":"const git_signature *","comment":"signature to duplicated","name":"sig"}],"return":{"type":"git_signature *","comment":"a copy of sig, NULL on out of memory"},"comments":"All internal strings are also duplicated.","argline":"const git_signature *sig","description":"Create a copy of an existing signature."},"git_revwalk_new":{"lineto":88,"line":70,"group":"revwalk","rawComments":"\n Allocate a new revision walker to iterate through a repo.\n\n This revision walker uses a custom memory pool and an internal\n commit cache, so it is relatively expensive to allocate.\n\n For maximum performance, this revision walker should be\n reused for different walks.\n\n This revision walker is *not* thread safe: it may only be\n used to walk a repository on a single thread; however,\n it is possible to have several revision walkers in\n several different threads walking the same repository.\n\n @param walker pointer to the new revision walker\n @param repo the repo to walk through\n @return 0 on success; error code otherwise\n\n","file":"revwalk.h","sig":"git_revwalk **::git_repository *","args":[{"type":"git_revwalk **","comment":"pointer to the new revision walker","name":"walker"},{"type":"git_repository *","comment":"the repo to walk through","name":"repo"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"This revision walker uses a custom memory pool and an internal\n commit cache, so it is relatively expensive to allocate.\n\n For maximum performance, this revision walker should be\n reused for different walks.\n\n This revision walker is *not* thread safe: it may only be\n used to walk a repository on a single thread; however,\n it is possible to have several revision walkers in\n several different threads walking the same repository.","argline":"git_revwalk **walker, git_repository *repo","description":"Allocate a new revision walker to iterate through a repo."},"git_signature_new":{"lineto":50,"line":40,"group":"signature","rawComments":"\n Create a new action signature. The signature must be freed\n manually or using git_signature_free\n\n @param name name of the person\n @param mail email of the person\n @param time time when the action happened\n @param offset timezone offset in minutes for the time\n @return the new sig, NULL on out of memory\n\n","file":"signature.h","sig":"const char *::const char *::git_time_t::int","args":[{"type":"const char *","comment":"name of the person","name":"name"},{"type":"const char *","comment":"","name":"email"},{"type":"git_time_t","comment":"time when the action happened","name":"time"},{"type":"int","comment":"timezone offset in minutes for the time","name":"offset"}],"return":{"type":"git_signature *","comment":"the new sig, NULL on out of memory"},"comments":"@param mail email of the person","argline":"const char *name, const char *email, git_time_t time, int offset","description":"Create a new action signature. The signature must be freed manually or using git_signature_free"},"git_oid_cmp":{"lineto":133,"line":127,"group":"oid","rawComments":"\n Compare two oid structures.\n @param a first oid structure.\n @param b second oid structure.\n @return <0, 0, >0 if a < b, a == b, a > b.\n\n","file":"oid.h","sig":"const git_oid *::const git_oid *","args":[{"type":"const git_oid *","comment":"first oid structure.","name":"a"},{"type":"const git_oid *","comment":"second oid structure.","name":"b"}],"return":{"type":"int","comment":"<0, 0, >0 if a < b, a == b, a > b."},"comments":"","argline":"const git_oid *a, const git_oid *b","description":"Compare two oid structures."},"git_tag_name":{"lineto":115,"line":109,"group":"tag","rawComments":"\n Get the name of a tag\n\n @param tag a previously loaded tag.\n @return name of the tag\n\n","file":"tag.h","sig":"git_tag *","args":[{"type":"git_tag *","comment":"","name":"t"}],"return":{"type":"const char *","comment":"name of the tag"},"comments":"@param tag a previously loaded tag.","argline":"git_tag *t","description":"Get the name of a tag"},"git_repository_index":{"lineto":153,"line":143,"group":"repository","rawComments":"\n Get the Index file of a Git repository\n\n This is a cheap operation; the index is only opened on the first call,\n and subsequent calls only retrieve the previous pointer.\n\n @param index Pointer where to store the index\n @param repo a repository object\n @return 0 on success; error code if the index could not be opened\n\n","file":"repository.h","sig":"git_index **::git_repository *","args":[{"type":"git_index **","comment":"Pointer where to store the index","name":"index"},{"type":"git_repository *","comment":"a repository object","name":"repo"}],"return":{"type":"int","comment":"0 on success; error code if the index could not be opened"},"comments":"This is a cheap operation; the index is only opened on the first call,\n and subsequent calls only retrieve the previous pointer.","argline":"git_index **index, git_repository *repo","description":"Get the Index file of a Git repository"},"git_blob_rawcontent":{"lineto":84,"line":73,"group":"blob","rawComments":"\n Get a read-only buffer with the raw content of a blob.\n\n A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time.\n\n @param blob pointer to the blob\n @return the pointer; NULL if the blob has no contents\n\n","file":"blob.h","sig":"git_blob *","args":[{"type":"git_blob *","comment":"pointer to the blob","name":"blob"}],"return":{"type":"const void *","comment":"the pointer; NULL if the blob has no contents"},"comments":"A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time.","argline":"git_blob *blob","description":"Get a read-only buffer with the raw content of a blob."},"git_object_typeisloose":{"lineto":128,"line":121,"group":"object","rawComments":"\n Determine if the given git_otype is a valid loose object type.\n\n @param type object type to test.\n @return true if the type represents a valid loose object type,\n false otherwise.\n\n","file":"object.h","sig":"git_otype","args":[{"type":"git_otype","comment":"object type to test.","name":"type"}],"return":{"type":"int","comment":"true if the type represents a valid loose object type,  false otherwise."},"comments":"","argline":"git_otype type","description":"Determine if the given git_otype is a valid loose object type."},"git_revwalk_repository":{"lineto":183,"line":176,"group":"revwalk","rawComments":"\n Return the repository on which this walker\n is operating.\n\n @param walk the revision walker\n @return the repository being walked\n\n","file":"revwalk.h","sig":"git_revwalk *","args":[{"type":"git_revwalk *","comment":"the revision walker","name":"walk"}],"return":{"type":"git_repository *","comment":"the repository being walked"},"comments":"","argline":"git_revwalk *walk","description":"Return the repository on which this walker is operating."},"git_reference_type":{"lineto":158,"line":150,"group":"reference","rawComments":"\n Get the type of a reference\n\n Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)\n\n @param ref The reference\n @return the type\n\n","file":"refs.h","sig":"git_reference *","args":[{"type":"git_reference *","comment":"The reference","name":"ref"}],"return":{"type":"git_rtype","comment":"the type"},"comments":"Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)","argline":"git_reference *ref","description":"Get the type of a reference"},"git_odb_add_alternate":{"lineto":100,"line":85,"group":"odb","rawComments":"\n Add a custom backend to an existing Object DB; this\n backend will work as an alternate.\n\n Alternate backends are always checked for objects *after*\n all the main backends have been exhausted.\n\n Writing is disabled on alternate backends.\n\n Read <odb_backends.h> for more information.\n\n @param odb database to add the backend to\n @paramm backend pointer to a git_odb_backend instance\n @return 0 on sucess; error code otherwise\n\n","file":"odb.h","sig":"git_odb *::git_odb_backend *::int","args":[{"type":"git_odb *","comment":"database to add the backend to","name":"odb"},{"type":"git_odb_backend *","comment":"","name":"backend"},{"type":"int","comment":"","name":"priority"}],"return":{"type":"int","comment":"0 on sucess; error code otherwise"},"comments":"Alternate backends are always checked for objects *after*\n all the main backends have been exhausted.\n\n Writing is disabled on alternate backends.\n\n Read <odb_backends.h> for more information.\n\n @paramm backend pointer to a git_odb_backend instance","argline":"git_odb *odb, git_odb_backend *backend, int priority","description":"Add a custom backend to an existing Object DB; this backend will work as an alternate."},"git_tag_create_o":{"lineto":190,"line":172,"group":"tag","rawComments":"\n Create a new tag in the repository from an existing\n `git_object` instance\n\n This method replaces the `target` and `target_type`\n paremeters of `git_tag_create` by a single instance\n of a `const git_object *`, which is assured to be\n a proper object in the ODB and hence will create\n a valid tag\n\n @see git_tag_create\n\n","file":"tag.h","sig":"git_oid *::git_repository *::const char *::const git_object *::const git_signature *::const char *","args":[{"type":"git_oid *","comment":"","name":"oid"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"const char *","comment":"","name":"tag_name"},{"type":"const git_object *","comment":"","name":"target"},{"type":"const git_signature *","comment":"","name":"tagger"},{"type":"const char *","comment":"","name":"message"}],"return":{"type":"int","comment":""},"comments":"This method replaces the `target` and `target_type`\n paremeters of `git_tag_create` by a single instance\n of a `const git_object *`, which is assured to be\n a proper object in the ODB and hence will create\n a valid tag\n\n @see git_tag_create","argline":"git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, const git_signature *tagger, const char *message","description":"Create a new tag in the repository from an existing `git_object` instance"},"git_revwalk_hide":{"lineto":136,"line":123,"group":"revwalk","rawComments":"\n Mark a commit (and its ancestors) uninteresting for the output.\n\n The given OID must belong to a commit on the walked\n repository.\n\n The resolved commit and all its parents will be hidden from the\n output on the revision walk.\n\n @param walker the walker being used for the traversal.\n @param commit the commit that will be ignored during the traversal\n @return 0 on success; error code otherwise\n\n","file":"revwalk.h","sig":"git_revwalk *::const git_oid *","args":[{"type":"git_revwalk *","comment":"","name":"walk"},{"type":"const git_oid *","comment":"","name":"oid"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The given OID must belong to a commit on the walked\n repository.\n\n The resolved commit and all its parents will be hidden from the\n output on the revision walk.\n\n @param walker the walker being used for the traversal.\n @param commit the commit that will be ignored during the traversal","argline":"git_revwalk *walk, const git_oid *oid","description":"Mark a commit (and its ancestors) uninteresting for the output."},"git_strarray_free":{"lineto":94,"line":79,"group":"strarray","rawComments":"\n @file git2/common.h\n @brief Git common platform definitions\n @defgroup git_common Git common platform definitions\n @ingroup Git\n @{\n\n","file":"common.h","sig":"git_strarray *","args":[{"type":"git_strarray *","comment":"","name":"array"}],"return":{"type":"void","comment":""},"comments":"","argline":"git_strarray *array","description":"@file git2/common.h @brief Git common platform definitions @defgroup git_common Git common platform definitions @ingroup Git @{"},"git_index_append":{"lineto":218,"line":201,"group":"index","rawComments":"\n Add (append) an index entry from a file in disk\n\n A new entry will always be inserted into the index;\n if the index already contains an entry for such\n path, the old entry will **not** be replaced.\n\n The file `path` must be relative to the repository's\n working folder and must be readable.\n\n This method will fail in bare index instances.\n\n @param index an existing index object\n @param path filename to add\n @param stage stage for the entry\n @return 0 on success, otherwise an error code\n\n","file":"index.h","sig":"git_index *::const char *::int","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const char *","comment":"filename to add","name":"path"},{"type":"int","comment":"stage for the entry","name":"stage"}],"return":{"type":"int","comment":"0 on success, otherwise an error code"},"comments":"A new entry will always be inserted into the index;\n if the index already contains an entry for such\n path, the old entry will **not** be replaced.\n\n The file `path` must be relative to the repository's\n working folder and must be readable.\n\n This method will fail in bare index instances.","argline":"git_index *index, const char *path, int stage","description":"Add (append) an index entry from a file in disk"},"git_reference_create_symbolic":{"lineto":69,"line":54,"group":"reference","rawComments":"\n Create a new symbolic reference.\n\n The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.\n\n @param ref_out Pointer to the newly created reference\n @param repo Repository where that reference will live\n @param name The name of the reference\n @param target The target of the reference\n @return 0 on success; error code otherwise\n\n","file":"refs.h","sig":"git_reference **::git_repository *::const char *::const char *","args":[{"type":"git_reference **","comment":"Pointer to the newly created reference","name":"ref_out"},{"type":"git_repository *","comment":"Repository where that reference will live","name":"repo"},{"type":"const char *","comment":"The name of the reference","name":"name"},{"type":"const char *","comment":"The target of the reference","name":"target"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.","argline":"git_reference **ref_out, git_repository *repo, const char *name, const char *target","description":"Create a new symbolic reference."},"git_object_id":{"lineto":67,"line":61,"group":"object","rawComments":"\n Get the id (SHA1) of a repository object\n\n @param obj the repository object\n @return the SHA1 id\n\n","file":"object.h","sig":"const git_object *","args":[{"type":"const git_object *","comment":"the repository object","name":"obj"}],"return":{"type":"const git_oid *","comment":"the SHA1 id"},"comments":"","argline":"const git_object *obj","description":"Get the id (SHA1) of a repository object"},"git_tag_create_frombuffer":{"lineto":204,"line":192,"group":"tag","rawComments":"\n Create a new tag in the repository from a buffer\n\n @param oid Pointer where to store the OID of the newly created tag\n\n @param repo Repository where to store the tag\n\n @param buffer Raw tag data\n\n","file":"tag.h","sig":"git_oid *::git_repository *::const char *","args":[{"type":"git_oid *","comment":"Pointer where to store the OID of the newly created tag","name":"oid"},{"type":"git_repository *","comment":"Repository where to store the tag","name":"repo"},{"type":"const char *","comment":"Raw tag data","name":"buffer"}],"return":{"type":"int","comment":""},"comments":"","argline":"git_oid *oid, git_repository *repo, const char *buffer","description":"Create a new tag in the repository from a buffer"},"git_odb_hash":{"lineto":246,"line":234,"group":"odb","rawComments":"\n Determine the object-ID (sha1 hash) of a data buffer\n\n The resulting SHA-1 OID will the itentifier for the data\n buffer as if the data buffer it were to written to the ODB.\n\n @param id the resulting object-ID.\n @param data data to hash\n @param len size of the data\n @param type of the data to hash\n @return 0 on success; error code otherwise\n\n","file":"odb.h","sig":"git_oid *::const void *::size_t::git_otype","args":[{"type":"git_oid *","comment":"the resulting object-ID.","name":"id"},{"type":"const void *","comment":"data to hash","name":"data"},{"type":"size_t","comment":"size of the data","name":"len"},{"type":"git_otype","comment":"of the data to hash","name":"type"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The resulting SHA-1 OID will the itentifier for the data\n buffer as if the data buffer it were to written to the ODB.","argline":"git_oid *id, const void *data, size_t len, git_otype type","description":"Determine the object-ID (sha1 hash) of a data buffer"},"git_object_lookup":{"lineto":59,"line":41,"group":"object","rawComments":"\n Lookup a reference to one of the objects in a repostory.\n\n The generated reference is owned by the repository and\n should be closed with the `git_object_close` method\n instead of free'd manually.\n\n The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type.\n\n @param object pointer to the looked-up object\n @param repo the repository to look up the object\n @param id the unique identifier for the object\n @param type the type of the object\n @return a reference to the object\n\n","file":"object.h","sig":"git_object **::git_repository *::const git_oid *::git_otype","args":[{"type":"git_object **","comment":"pointer to the looked-up object","name":"object"},{"type":"git_repository *","comment":"the repository to look up the object","name":"repo"},{"type":"const git_oid *","comment":"the unique identifier for the object","name":"id"},{"type":"git_otype","comment":"the type of the object","name":"type"}],"return":{"type":"int","comment":"a reference to the object"},"comments":"The generated reference is owned by the repository and\n should be closed with the `git_object_close` method\n instead of free'd manually.\n\n The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type.","argline":"git_object **object, git_repository *repo, const git_oid *id, git_otype type","description":"Lookup a reference to one of the objects in a repostory."},"git_reference_oid":{"lineto":138,"line":130,"group":"reference","rawComments":"\n Get the OID pointed to by a reference.\n\n Only available if the reference is direct (i.e. not symbolic)\n\n @param ref The reference\n @return a pointer to the oid if available, NULL otherwise\n\n","file":"refs.h","sig":"git_reference *","args":[{"type":"git_reference *","comment":"The reference","name":"ref"}],"return":{"type":"const git_oid *","comment":"a pointer to the oid if available, NULL otherwise"},"comments":"Only available if the reference is direct (i.e. not symbolic)","argline":"git_reference *ref","description":"Get the OID pointed to by a reference."},"git_oid_shorten_free":{"lineto":187,"line":182,"group":"oid","rawComments":"\n Free an OID shortener instance\n\n @param os a `git_oid_shorten` instance\n\n","file":"oid.h","sig":"git_oid_shorten *","args":[{"type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance","name":"os"}],"return":{"type":"void","comment":""},"comments":"","argline":"git_oid_shorten *os","description":"Free an OID shortener instance"},"git_odb_object_data":{"lineto":279,"line":268,"group":"odb","rawComments":"\n Return the data of an ODB object\n\n This is the uncompressed, raw data as read from the ODB,\n without the leading header.\n\n This pointer is owned by the object and shall not be free'd.\n\n @param object the object\n @return a pointer to the data\n\n","file":"odb.h","sig":"git_odb_object *","args":[{"type":"git_odb_object *","comment":"the object","name":"object"}],"return":{"type":"const void *","comment":"a pointer to the data"},"comments":"This is the uncompressed, raw data as read from the ODB,\n without the leading header.\n\n This pointer is owned by the object and shall not be free'd.","argline":"git_odb_object *object","description":"Return the data of an ODB object"},"git_treebuilder_filter":{"lineto":248,"line":237,"group":"treebuilder","rawComments":"\n Filter the entries in the tree\n\n The `filter` callback will be called for each entry\n in the tree with a pointer to the entry and the\n provided `payload`: if the callback returns 1, the\n entry will be filtered (removed from the builder).\n\n @param bld Tree builder\n @param filter Callback to filter entries\n\n","file":"tree.h","sig":"git_treebuilder *::int(*)(const git_tree_entry *, void *)::void *","args":[{"type":"git_treebuilder *","comment":"Tree builder","name":"bld"},{"type":"int(*)(const git_tree_entry *, void *)","comment":"Callback to filter entries","name":"filter"},{"type":"void *","comment":"","name":"payload"}],"return":{"type":"void","comment":""},"comments":"The `filter` callback will be called for each entry\n in the tree with a pointer to the entry and the\n provided `payload`: if the callback returns 1, the\n entry will be filtered (removed from the builder).","argline":"git_treebuilder *bld, int (*filter)(const git_tree_entry *, void *), void *payload","description":"Filter the entries in the tree"},"__attribute__":{"lineto":58,"line":53,"rawComments":" Declare a public TLS symbol exported for application use. ","file":"common.h","sig":"","args":[{"type":"","comment":"","name":"(visibility(\"default\"))"}],"return":{"type":"","comment":""},"comments":"","argline":"(visibility(\"default\"))","description":"Declare a public TLS symbol exported for application use."},"git_repository_database":{"lineto":141,"line":135,"group":"repository","rawComments":"\n Get the object database behind a Git repository\n\n @param repo a repository object\n @return a pointer to the object db\n\n","file":"repository.h","sig":"git_repository *","args":[{"type":"git_repository *","comment":"a repository object","name":"repo"}],"return":{"type":"git_odb *","comment":"a pointer to the object db"},"comments":"","argline":"git_repository *repo","description":"Get the object database behind a Git repository"},"git_tree_entry_id":{"lineto":129,"line":123,"group":"tree","rawComments":"\n Get the id of the object pointed by the entry\n\n @param entry a tree entry\n @return the oid of the object\n\n","file":"tree.h","sig":"const git_tree_entry *","args":[{"type":"const git_tree_entry *","comment":"a tree entry","name":"entry"}],"return":{"type":"const git_oid *","comment":"the oid of the object"},"comments":"","argline":"const git_tree_entry *entry","description":"Get the id of the object pointed by the entry"},"git_tag_list":{"lineto":293,"line":278,"group":"tag","rawComments":"\n Fill a list with all the tags in the Repository\n\n The string array will be filled with the names of the\n matching tags; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`.\n\n @param array Pointer to a git_strarray structure where\n\t\tthe tag names will be stored\n @param repo Repository where to find the tags\n @return 0 on success; error code otherwise\n\n","file":"tag.h","sig":"git_strarray *::git_repository *","args":[{"type":"git_strarray *","comment":"","name":"tag_names"},{"type":"git_repository *","comment":"Repository where to find the tags","name":"repo"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The string array will be filled with the names of the\n matching tags; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`.\n\n @param array Pointer to a git_strarray structure where\n\t\tthe tag names will be stored","argline":"git_strarray *tag_names, git_repository *repo","description":"Fill a list with all the tags in the Repository"},"git_blob_create_fromfile":{"lineto":105,"line":94,"group":"blob","rawComments":"\n Read a file from the working folder of a repository\n and write it to the Object Database as a loose blob\n\n @param oid return the id of the written blob\n @param repo repository where the blob will be written.\n\tthis repository cannot be bare\n @param path file from which the blob will be created,\n\trelative to the repository's working dir\n @return 0 on success; error code otherwise\n\n","file":"blob.h","sig":"git_oid *::git_repository *::const char *","args":[{"type":"git_oid *","comment":"return the id of the written blob","name":"oid"},{"type":"git_repository *","comment":"repository where the blob will be written.  this repository cannot be bare","name":"repo"},{"type":"const char *","comment":"file from which the blob will be created,  relative to the repository's working dir","name":"path"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"","argline":"git_oid *oid, git_repository *repo, const char *path","description":"Read a file from the working folder of a repository and write it to the Object Database as a loose blob"},"git_tree_entry_byname":{"lineto":96,"line":89,"group":"tree","rawComments":"\n Lookup a tree entry by its filename\n\n @param tree a previously loaded tree.\n @param filename the filename of the desired entry\n @return the tree entry; NULL if not found\n\n","file":"tree.h","sig":"git_tree *::const char *","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"},{"type":"const char *","comment":"the filename of the desired entry","name":"filename"}],"return":{"type":"const git_tree_entry *","comment":"the tree entry; NULL if not found"},"comments":"","argline":"git_tree *tree, const char *filename","description":"Lookup a tree entry by its filename"},"git_tag_id":{"lineto":79,"line":73,"group":"tag","rawComments":"\n Get the id of a tag.\n\n @param tag a previously loaded tag.\n @return object identity for the tag.\n\n","file":"tag.h","sig":"git_tag *","args":[{"type":"git_tag *","comment":"a previously loaded tag.","name":"tag"}],"return":{"type":"const git_oid *","comment":"object identity for the tag."},"comments":"","argline":"git_tag *tag","description":"Get the id of a tag."},"git_odb_close":{"lineto":107,"line":102,"group":"odb","rawComments":"\n Close an open object database.\n\n @param db database pointer to close.  If NULL no action is taken.\n\n","file":"odb.h","sig":"git_odb *","args":[{"type":"git_odb *","comment":"database pointer to close.  If NULL no action is taken.","name":"db"}],"return":{"type":"void","comment":""},"comments":"","argline":"git_odb *db","description":"Close an open object database."},"git_reference_create_oid_f":{"lineto":128,"line":109,"group":"reference","rawComments":"\n Create a new object id reference, overwriting an existing one with\n the same name, if it exists.\n\n If the new reference isn't an object id one, any pointers to the\n old reference become invalid.\n\n The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.\n\n @param ref_out Pointer to the newly created reference\n @param repo Repository where that reference will live\n @param name The name of the reference\n @param id The object id pointed to by the reference.\n @return 0 on success; error code otherwise\n\n","file":"refs.h","sig":"git_reference **::git_repository *::const char *::const git_oid *","args":[{"type":"git_reference **","comment":"Pointer to the newly created reference","name":"ref_out"},{"type":"git_repository *","comment":"Repository where that reference will live","name":"repo"},{"type":"const char *","comment":"The name of the reference","name":"name"},{"type":"const git_oid *","comment":"The object id pointed to by the reference.","name":"id"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"If the new reference isn't an object id one, any pointers to the\n old reference become invalid.\n\n The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.","argline":"git_reference **ref_out, git_repository *repo, const char *name, const git_oid *id","description":"Create a new object id reference, overwriting an existing one with the same name, if it exists."},"git_reference_target":{"lineto":148,"line":140,"group":"reference","rawComments":"\n Get full name to the reference pointed by this reference\n\n Only available if the reference is symbolic\n\n @param ref The reference\n @return a pointer to the name if available, NULL otherwise\n\n","file":"refs.h","sig":"git_reference *","args":[{"type":"git_reference *","comment":"The reference","name":"ref"}],"return":{"type":"const char *","comment":"a pointer to the name if available, NULL otherwise"},"comments":"Only available if the reference is symbolic","argline":"git_reference *ref","description":"Get full name to the reference pointed by this reference"},"git_odb_add_backend":{"lineto":83,"line":74,"group":"odb","rawComments":"\n Add a custom backend to an existing Object DB\n\n Read <odb_backends.h> for more information.\n\n @param odb database to add the backend to\n @paramm backend pointer to a git_odb_backend instance\n @return 0 on sucess; error code otherwise\n\n","file":"odb.h","sig":"git_odb *::git_odb_backend *::int","args":[{"type":"git_odb *","comment":"database to add the backend to","name":"odb"},{"type":"git_odb_backend *","comment":"","name":"backend"},{"type":"int","comment":"","name":"priority"}],"return":{"type":"int","comment":"0 on sucess; error code otherwise"},"comments":"Read <odb_backends.h> for more information.\n\n @paramm backend pointer to a git_odb_backend instance","argline":"git_odb *odb, git_odb_backend *backend, int priority","description":"Add a custom backend to an existing Object DB"},"git_object_type":{"lineto":75,"line":69,"group":"object","rawComments":"\n Get the object type of an object\n\n @param obj the repository object\n @return the object's type\n\n","file":"object.h","sig":"const git_object *","args":[{"type":"const git_object *","comment":"the repository object","name":"obj"}],"return":{"type":"git_otype","comment":"the object's type"},"comments":"","argline":"const git_object *obj","description":"Get the object type of an object"},"git_tag_create_fo":{"lineto":262,"line":243,"group":"tag","rawComments":"\n Create a new tag in the repository from an existing\n `git_object` instance and overwrite an already existing\n tag reference, if any.\n\n This method replaces the `target` and `target_type`\n paremeters of `git_tag_create_f` by a single instance\n of a `const git_object *`, which is assured to be\n a proper object in the ODB and hence will create\n a valid tag\n\n @see git_tag_create_f\n\n","file":"tag.h","sig":"git_oid *::git_repository *::const char *::const git_object *::const git_signature *::const char *","args":[{"type":"git_oid *","comment":"","name":"oid"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"const char *","comment":"","name":"tag_name"},{"type":"const git_object *","comment":"","name":"target"},{"type":"const git_signature *","comment":"","name":"tagger"},{"type":"const char *","comment":"","name":"message"}],"return":{"type":"int","comment":""},"comments":"This method replaces the `target` and `target_type`\n paremeters of `git_tag_create_f` by a single instance\n of a `const git_object *`, which is assured to be\n a proper object in the ODB and hence will create\n a valid tag\n\n @see git_tag_create_f","argline":"git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, const git_signature *tagger, const char *message","description":"Create a new tag in the repository from an existing `git_object` instance and overwrite an already existing tag reference, if any."},"git_commit_create_ov":{"lineto":273,"line":248,"group":"commit","rawComments":"\n Create a new commit in the repository using `git_object`\n instances and a variable argument list.\n\n The `tree_oid` paremeter now takes a instance\n of `const git_tree *`.\n\n The parents for the commit are specified as a variable\n list of pointers to `const git_commit *`. Note that this\n is a convenience method which may not be safe to export\n for certain languages or compilers\n\n All other parameters remain the same\n\n @see git_commit_create\n\n","file":"commit.h","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const git_tree *::int::","args":[{"type":"git_oid *","comment":"","name":"oid"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"const char *","comment":"","name":"update_ref"},{"type":"const git_signature *","comment":"","name":"author"},{"type":"const git_signature *","comment":"","name":"committer"},{"type":"const char *","comment":"","name":"message"},{"type":"const git_tree *","comment":"","name":"tree"},{"type":"int","comment":"","name":"parent_count"},{"type":"","comment":"","name":"..."}],"return":{"type":"int","comment":""},"comments":"The `tree_oid` paremeter now takes a instance\n of `const git_tree *`.\n\n The parents for the commit are specified as a variable\n list of pointers to `const git_commit *`. Note that this\n is a convenience method which may not be safe to export\n for certain languages or compilers\n\n All other parameters remain the same\n\n @see git_commit_create","argline":"git_oid *oid, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message, const git_tree *tree, int parent_count, ...","description":"Create a new commit in the repository using `git_object` instances and a variable argument list."},"git_commit_create_o":{"lineto":246,"line":226,"group":"commit","rawComments":"\n Create a new commit in the repository using `git_object`\n instances as parameters.\n\n The `tree_oid` and `parent_oids` paremeters now take a instance\n of `git_tree` and `git_commit`, respectively.\n\n All other parameters remain the same\n\n @see git_commit_create\n\n","file":"commit.h","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const git_tree *::int::const git_commit *","args":[{"type":"git_oid *","comment":"","name":"oid"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"const char *","comment":"","name":"update_ref"},{"type":"const git_signature *","comment":"","name":"author"},{"type":"const git_signature *","comment":"","name":"committer"},{"type":"const char *","comment":"","name":"message"},{"type":"const git_tree *","comment":"","name":"tree"},{"type":"int","comment":"","name":"parent_count"},{"type":"const git_commit *","comment":"","name":"parents[]"}],"return":{"type":"int","comment":""},"comments":"The `tree_oid` and `parent_oids` paremeters now take a instance\n of `git_tree` and `git_commit`, respectively.\n\n All other parameters remain the same\n\n @see git_commit_create","argline":"git_oid *oid, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message, const git_tree *tree, int parent_count, const git_commit *parents[]","description":"Create a new commit in the repository using `git_object` instances as parameters."},"git_index_add":{"lineto":187,"line":174,"group":"index","rawComments":"\n Add or update an index entry from a file in disk\n\n The file `path` must be relative to the repository's\n working folder and must be readable.\n\n This method will fail in bare index instances.\n\n @param index an existing index object\n @param path filename to add\n @param stage stage for the entry\n @return 0 on success, otherwise an error code\n\n","file":"index.h","sig":"git_index *::const char *::int","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const char *","comment":"filename to add","name":"path"},{"type":"int","comment":"stage for the entry","name":"stage"}],"return":{"type":"int","comment":"0 on success, otherwise an error code"},"comments":"The file `path` must be relative to the repository's\n working folder and must be readable.\n\n This method will fail in bare index instances.","argline":"git_index *index, const char *path, int stage","description":"Add or update an index entry from a file in disk"},"git_treebuilder_clear":{"lineto":183,"line":178,"group":"treebuilder","rawComments":"\n Clear all the entires in the builder\n\n @param bld Builder to clear\n\n","file":"tree.h","sig":"git_treebuilder *","args":[{"type":"git_treebuilder *","comment":"Builder to clear","name":"bld"}],"return":{"type":"void","comment":""},"comments":"","argline":"git_treebuilder *bld","description":"Clear all the entires in the builder"},"git_tag_create":{"lineto":169,"line":134,"group":"tag","rawComments":"\n Create a new tag in the repository from an OID\n\n @param oid Pointer where to store the OID of the\n\tnewly created tag\n\n @param repo Repository where to store the tag\n\n @param tag_name Name for the tag; this name is validated\n for consistency. It should also not conflict with an\n already existing tag name\n\n @param target OID to which this tag points; note that no\n\tvalidation is done on this OID. Use the _o version of this\n\tmethod to assure a proper object is being tagged\n\n @param target_type Type of the tagged OID; note that no\n\tvalidation is performed here either\n\n @param tagger Signature of the tagger for this tag, and\n  of the tagging time\n\n @param message Full message for this tag\n\n @return 0 on success; error code otherwise.\n\tA tag object is written to the ODB, and a proper reference\n\tis written in the /refs/tags folder, pointing to it\n\n","file":"tag.h","sig":"git_oid *::git_repository *::const char *::const git_oid *::git_otype::const git_signature *::const char *","args":[{"type":"git_oid *","comment":"Pointer where to store the OID of the  newly created tag","name":"oid"},{"type":"git_repository *","comment":"Repository where to store the tag","name":"repo"},{"type":"const char *","comment":"Name for the tag; this name is validated  for consistency. It should also not conflict with an  already existing tag name","name":"tag_name"},{"type":"const git_oid *","comment":"OID to which this tag points; note that no  validation is done on this OID. Use the _o version of this  method to assure a proper object is being tagged","name":"target"},{"type":"git_otype","comment":"Type of the tagged OID; note that no  validation is performed here either","name":"target_type"},{"type":"const git_signature *","comment":"Signature of the tagger for this tag, and   of the tagging time","name":"tagger"},{"type":"const char *","comment":"Full message for this tag","name":"message"}],"return":{"type":"int","comment":"0 on success; error code otherwise.  A tag object is written to the ODB, and a proper reference  is written in the /refs/tags folder, pointing to it"},"comments":"","argline":"git_oid *oid, git_repository *repo, const char *tag_name, const git_oid *target, git_otype target_type, const git_signature *tagger, const char *message","description":"Create a new tag in the repository from an OID"},"git_odb_backend_sqlite":{"lineto":103,"line":103,"group":"odb","rawComments":"","file":"odb_backend.h","sig":"git_odb_backend **::const char *","args":[{"type":"git_odb_backend **","comment":"","name":"backend_out"},{"type":"const char *","comment":"","name":"sqlite_db"}],"return":{"type":"int","comment":""},"comments":"","argline":"git_odb_backend **backend_out, const char *sqlite_db","description":""},"git_index_get":{"lineto":257,"line":247,"group":"index","rawComments":"\n Get a pointer to one of the entries in the index\n\n This entry can be modified, and the changes will be written\n back to disk on the next write() call.\n\n @param index an existing index object\n @param n the position of the entry\n @return a pointer to the entry; NULL if out of bounds\n\n","file":"index.h","sig":"git_index *::int","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"int","comment":"the position of the entry","name":"n"}],"return":{"type":"git_index_entry *","comment":"a pointer to the entry; NULL if out of bounds"},"comments":"This entry can be modified, and the changes will be written\n back to disk on the next write() call.","argline":"git_index *index, int n","description":"Get a pointer to one of the entries in the index"},"git_repository_free":{"lineto":166,"line":155,"group":"repository","rawComments":"\n Free a previously allocated repository\n\n Note that after a repository is free'd, all the objects it has spawned\n will still exist until they are manually closed by the user\n with `git_object_close`, but accessing any of the attributes of\n an object without a backing repository will result in undefined\n behavior\n\n @param repo repository handle to close. If NULL nothing occurs.\n\n","file":"repository.h","sig":"git_repository *","args":[{"type":"git_repository *","comment":"repository handle to close. If NULL nothing occurs.","name":"repo"}],"return":{"type":"void","comment":""},"comments":"Note that after a repository is free'd, all the objects it has spawned\n will still exist until they are manually closed by the user\n with `git_object_close`, but accessing any of the attributes of\n an object without a backing repository will result in undefined\n behavior","argline":"git_repository *repo","description":"Free a previously allocated repository"},"git_oid_cpy":{"lineto":125,"line":120,"group":"oid","rawComments":"\n Copy an oid from one structure to another.\n @param out oid structure the result is written into.\n @param src oid structure to copy from.\n\n","file":"oid.h","sig":"git_oid *::const git_oid *","args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const git_oid *","comment":"oid structure to copy from.","name":"src"}],"return":{"type":"void","comment":""},"comments":"","argline":"git_oid *out, const git_oid *src","description":"Copy an oid from one structure to another."},"git_index_open_inrepo":{"lineto":128,"line":120,"group":"index","rawComments":"\n Open the Index inside the git repository pointed\n by 'repo'.\n\n @param index the pointer for the new index\n @param repo the git repo which owns the index\n @return 0 on success; error code otherwise\n\n","file":"index.h","sig":"git_index **::git_repository *","args":[{"type":"git_index **","comment":"the pointer for the new index","name":"index"},{"type":"git_repository *","comment":"the git repo which owns the index","name":"repo"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"","argline":"git_index **index, git_repository *repo","description":"Open the Index inside the git repository pointed by 'repo'."},"git_treebuilder_get":{"lineto":206,"line":196,"group":"treebuilder","rawComments":"\n Get an entry from the builder from its filename\n\n The returned entry is owned by the builder and should\n not be freed manually.\n\n @param bld Tree builder\n @param filename Name of the entry\n @return pointer to the entry; NULL if not found\n\n","file":"tree.h","sig":"git_treebuilder *::const char *","args":[{"type":"git_treebuilder *","comment":"Tree builder","name":"bld"},{"type":"const char *","comment":"Name of the entry","name":"filename"}],"return":{"type":"const git_tree_entry *","comment":"pointer to the entry; NULL if not found"},"comments":"The returned entry is owned by the builder and should\n not be freed manually.","argline":"git_treebuilder *bld, const char *filename","description":"Get an entry from the builder from its filename"},"git_oid_shorten_add":{"lineto":180,"line":156,"group":"oid","rawComments":"\n Add a new OID to set of shortened OIDs and calculate\n the minimal length to uniquely identify all the OIDs in\n the set.\n\n The OID is expected to be a 40-char hexadecimal string.\n The OID is owned by the user and will not be modified\n or freed.\n\n For performance reasons, there is a hard-limit of how many\n OIDs can be added to a single set (around ~22000, assuming\n a mostly randomized distribution), which should be enough\n for any kind of program, and keeps the algorithm fast and\n memory-efficient.\n\n Attempting to add more than those OIDs will result in a\n GIT_ENOMEM error\n\n @param os a `git_oid_shorten` instance\n @param text_oid an OID in text form\n @return the minimal length to uniquely identify all OIDs\n\t\tadded so far to the set; or an error code (<0) if an\n\t\terror occurs.\n\n","file":"oid.h","sig":"git_oid_shorten *::const char *","args":[{"type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance","name":"os"},{"type":"const char *","comment":"an OID in text form","name":"text_oid"}],"return":{"type":"int","comment":"the minimal length to uniquely identify all OIDs   added so far to the set; or an error code (<0) if an   error occurs."},"comments":"The OID is expected to be a 40-char hexadecimal string.\n The OID is owned by the user and will not be modified\n or freed.\n\n For performance reasons, there is a hard-limit of how many\n OIDs can be added to a single set (around ~22000, assuming\n a mostly randomized distribution), which should be enough\n for any kind of program, and keeps the algorithm fast and\n memory-efficient.\n\n Attempting to add more than those OIDs will result in a\n GIT_ENOMEM error","argline":"git_oid_shorten *os, const char *text_oid","description":"Add a new OID to set of shortened OIDs and calculate the minimal length to uniquely identify all the OIDs in the set."},"git_blob_close":{"lineto":70,"line":55,"group":"blob","rawComments":"\n Close an open blob\n\n This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a blob. Failure to do so will cause a memory leak.\n\n @param blob the blob to close\n\n","file":"blob.h","sig":"git_blob *","args":[{"type":"git_blob *","comment":"the blob to close","name":"blob"}],"return":{"type":"void","comment":""},"comments":"This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a blob. Failure to do so will cause a memory leak.","argline":"git_blob *blob","description":"Close an open blob"},"git_revwalk_next":{"lineto":156,"line":138,"group":"revwalk","rawComments":"\n Get the next commit from the revision walk.\n\n The initial call to this method is *not* blocking when\n iterating through a repo with a time-sorting mode.\n\n Iterating with Topological or inverted modes makes the initial\n call blocking to preprocess the commit list, but this block should be\n mostly unnoticeable on most repositories (topological preprocessing\n times at 0.3s on the git.git repo).\n\n The revision walker is reset when the walk is over.\n\n @param oid Pointer where to store the oid of the next commit\n @param walk the walker to pop the commit from.\n @return GIT_SUCCESS if the next commit was found;\n\tGIT_EREVWALKOVER if there are no commits left to iterate\n\n","file":"revwalk.h","sig":"git_oid *::git_revwalk *","args":[{"type":"git_oid *","comment":"Pointer where to store the oid of the next commit","name":"oid"},{"type":"git_revwalk *","comment":"the walker to pop the commit from.","name":"walk"}],"return":{"type":"int","comment":"GIT_SUCCESS if the next commit was found;  GIT_EREVWALKOVER if there are no commits left to iterate"},"comments":"The initial call to this method is *not* blocking when\n iterating through a repo with a time-sorting mode.\n\n Iterating with Topological or inverted modes makes the initial\n call blocking to preprocess the commit list, but this block should be\n mostly unnoticeable on most repositories (topological preprocessing\n times at 0.3s on the git.git repo).\n\n The revision walker is reset when the walk is over.","argline":"git_oid *oid, git_revwalk *walk","description":"Get the next commit from the revision walk."},"git_repository_init":{"lineto":183,"line":168,"group":"repository","rawComments":"\n Creates a new Git repository in the given folder.\n\n TODO:\n\t- Reinit the repository\n\t- Create config files\n\n @param repo_out pointer to the repo which will be created or reinitialized\n @param path the path to the repository\n @param is_bare if true, a Git repository without a working directory is created\n\t\tat the pointed path. If false, provided path will be considered as the working\n\t\tdirectory into which the .git directory will be created.\n\n @return 0 on success; error code otherwise\n\n","file":"repository.h","sig":"git_repository **::const char *::unsigned","args":[{"type":"git_repository **","comment":"pointer to the repo which will be created or reinitialized","name":"repo_out"},{"type":"const char *","comment":"the path to the repository","name":"path"},{"type":"unsigned","comment":"if true, a Git repository without a working directory is created   at the pointed path. If false, provided path will be considered as the working   directory into which the .git directory will be created.","name":"is_bare"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"TODO:\n\t- Reinit the repository\n\t- Create config files","argline":"git_repository **repo_out, const char *path, unsigned is_bare","description":"Creates a new Git repository in the given folder."},"git_index_clear":{"lineto":137,"line":130,"group":"index","rawComments":"\n Clear the contents (all the entries) of an index object.\n This clears the index object in memory; changes must be manually\n written to disk for them to take effect.\n\n @param index an existing index object\n\n","file":"index.h","sig":"git_index *","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"return":{"type":"void","comment":""},"comments":"","argline":"git_index *index","description":"Clear the contents (all the entries) of an index object. This clears the index object in memory; changes must be manually written to disk for them to take effect."},"git_repository_workdir":{"lineto":213,"line":205,"group":"repository","rawComments":"\n Get the normalized path to the working directory of the repository.\n\n If the repository is bare, there is no working directory and NULL we be returned.\n\n @param repo a repository object\n @return NULL if the repository is bare; absolute path to the working directory otherwise.\n\n","file":"repository.h","sig":"git_repository *","args":[{"type":"git_repository *","comment":"a repository object","name":"repo"}],"return":{"type":"const char *","comment":"NULL if the repository is bare; absolute path to the working directory otherwise."},"comments":"If the repository is bare, there is no working directory and NULL we be returned.","argline":"git_repository *repo","description":"Get the normalized path to the working directory of the repository."},"git_treebuilder_remove":{"lineto":235,"line":229,"group":"treebuilder","rawComments":"\n Remove an entry from the builder by its filename\n\n @param bld Tree builder\n @param filename Filename of the entry to remove\n\n","file":"tree.h","sig":"git_treebuilder *::const char *","args":[{"type":"git_treebuilder *","comment":"Tree builder","name":"bld"},{"type":"const char *","comment":"Filename of the entry to remove","name":"filename"}],"return":{"type":"int","comment":""},"comments":"","argline":"git_treebuilder *bld, const char *filename","description":"Remove an entry from the builder by its filename"},"git_tree_entrycount":{"lineto":87,"line":81,"group":"tree","rawComments":"\n Get the number of entries listed in a tree\n\n @param tree a previously loaded tree.\n @return the number of entries in the tree\n\n","file":"tree.h","sig":"git_tree *","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"}],"return":{"type":"size_t","comment":"the number of entries in the tree"},"comments":"","argline":"git_tree *tree","description":"Get the number of entries listed in a tree"},"git_tag_target":{"lineto":91,"line":81,"group":"tag","rawComments":"\n Get the tagged object of a tag\n\n This method performs a repository lookup for the\n given object and returns it\n\n @param target pointer where to store the target\n @param tag a previously loaded tag.\n @return 0 on success; error code otherwise\n\n","file":"tag.h","sig":"git_object **::git_tag *","args":[{"type":"git_object **","comment":"pointer where to store the target","name":"target"},{"type":"git_tag *","comment":"","name":"t"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"This method performs a repository lookup for the\n given object and returns it\n\n @param tag a previously loaded tag.","argline":"git_object **target, git_tag *t","description":"Get the tagged object of a tag"},"git_commit_time":{"lineto":103,"line":97,"group":"commit","rawComments":"\n Get the commit time (i.e. committer time) of a commit.\n\n @param commit a previously loaded commit.\n @return the time of a commit\n\n","file":"commit.h","sig":"git_commit *","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"return":{"type":"git_time_t","comment":"the time of a commit"},"comments":"","argline":"git_commit *commit","description":"Get the commit time (i.e. committer time) of a commit."},"git_index_free":{"lineto":144,"line":139,"group":"index","rawComments":"\n Free an existing index object.\n\n @param index an existing index object\n\n","file":"index.h","sig":"git_index *","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"return":{"type":"void","comment":""},"comments":"","argline":"git_index *index","description":"Free an existing index object."},"git_index_write":{"lineto":162,"line":155,"group":"index","rawComments":"\n Write an existing index object from memory back to disk\n using an atomic file lock.\n\n @param index an existing index object\n @return 0 on success, otherwise an error code\n\n","file":"index.h","sig":"git_index *","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"return":{"type":"int","comment":"0 on success, otherwise an error code"},"comments":"","argline":"git_index *index","description":"Write an existing index object from memory back to disk using an atomic file lock."},"git_odb_object_id":{"lineto":266,"line":258,"group":"odb","rawComments":"\n Return the OID of an ODB object\n\n This is the OID from which the object was read from\n\n @param object the object\n @return a pointer to the OID\n\n","file":"odb.h","sig":"git_odb_object *","args":[{"type":"git_odb_object *","comment":"the object","name":"object"}],"return":{"type":"const git_oid *","comment":"a pointer to the OID"},"comments":"This is the OID from which the object was read from","argline":"git_odb_object *object","description":"Return the OID of an ODB object"},"git_commit_create":{"lineto":224,"line":177,"group":"commit","rawComments":"\n Create a new commit in the repository\n\n\n @param oid Pointer where to store the OID of the\n\tnewly created commit\n\n @param repo Repository where to store the commit\n\n @param update_ref If not NULL, name of the reference that\n\twill be updated to point to this commit. If the reference\n\tis not direct, it will be resolved to a direct reference.\n\tUse \"HEAD\" to update the HEAD of the current branch and\n\tmake it point to this commit\n\n @param author Signature representing the author and the authory\n\ttime of this commit\n\n @param committer Signature representing the committer and the\n  commit time of this commit\n\n @param message Full message for this commit\n\n @param tree_oid Object ID of the tree for this commit. Note that\n  no validation is performed on this OID. Use the _o variants of\n  this method to assure a proper tree is passed to the commit.\n\n @param parent_count Number of parents for this commit\n\n @param parents Array of pointers to parent OIDs for this commit.\n\tNote that no validation is performed on these OIDs. Use the _o\n\tvariants of this method to assure that are parents for the commit\n\tare proper objects.\n\n @return 0 on success; error code otherwise\n\tThe created commit will be written to the Object Database and\n\tthe given reference will be updated to point to it\n\n","file":"commit.h","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const git_oid *::int::const git_oid *","args":[{"type":"git_oid *","comment":"Pointer where to store the OID of the  newly created commit","name":"oid"},{"type":"git_repository *","comment":"Repository where to store the commit","name":"repo"},{"type":"const char *","comment":"If not NULL, name of the reference that  will be updated to point to this commit. If the reference  is not direct, it will be resolved to a direct reference.  Use \"HEAD\" to update the HEAD of the current branch and  make it point to this commit","name":"update_ref"},{"type":"const git_signature *","comment":"Signature representing the author and the authory  time of this commit","name":"author"},{"type":"const git_signature *","comment":"Signature representing the committer and the   commit time of this commit","name":"committer"},{"type":"const char *","comment":"Full message for this commit","name":"message"},{"type":"const git_oid *","comment":"Object ID of the tree for this commit. Note that   no validation is performed on this OID. Use the _o variants of   this method to assure a proper tree is passed to the commit.","name":"tree_oid"},{"type":"int","comment":"Number of parents for this commit","name":"parent_count"},{"type":"const git_oid *","comment":"","name":"parent_oids[]"}],"return":{"type":"int","comment":"0 on success; error code otherwise  The created commit will be written to the Object Database and  the given reference will be updated to point to it"},"comments":"@param parents Array of pointers to parent OIDs for this commit.\n\tNote that no validation is performed on these OIDs. Use the _o\n\tvariants of this method to assure that are parents for the commit\n\tare proper objects.","argline":"git_oid *oid, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message, const git_oid *tree_oid, int parent_count, const git_oid *parent_oids[]","description":"Create a new commit in the repository"},"git_revwalk_push":{"lineto":120,"line":105,"group":"revwalk","rawComments":"\n Mark a commit to start traversal from.\n\n The given OID must belong to a commit on the walked\n repository.\n\n The given commit will be used as one of the roots\n when starting the revision walk. At least one commit\n must be pushed the repository before a walk can\n be started.\n\n @param walker the walker being used for the traversal.\n @param oid the oid of the commit to start from.\n @return 0 on success; error code otherwise\n\n","file":"revwalk.h","sig":"git_revwalk *::const git_oid *","args":[{"type":"git_revwalk *","comment":"","name":"walk"},{"type":"const git_oid *","comment":"the oid of the commit to start from.","name":"oid"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The given OID must belong to a commit on the walked\n repository.\n\n The given commit will be used as one of the roots\n when starting the revision walk. At least one commit\n must be pushed the repository before a walk can\n be started.\n\n @param walker the walker being used for the traversal.","argline":"git_revwalk *walk, const git_oid *oid","description":"Mark a commit to start traversal from."},"git_blob_lookup":{"lineto":53,"line":42,"group":"blob","rawComments":"\n Lookup a blob object from a repository.\n\n @param blob pointer to the looked up blob\n @param repo the repo to use when locating the blob.\n @param id identity of the blob to locate.\n @return 0 on success; error code otherwise\n\n","file":"blob.h","sig":"git_blob **::git_repository *::const git_oid *","args":[{"type":"git_blob **","comment":"pointer to the looked up blob","name":"blob"},{"type":"git_repository *","comment":"the repo to use when locating the blob.","name":"repo"},{"type":"const git_oid *","comment":"identity of the blob to locate.","name":"id"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"","argline":"git_blob **blob, git_repository *repo, const git_oid *id","description":"Lookup a blob object from a repository."},"git_tag_tagger":{"lineto":123,"line":117,"group":"tag","rawComments":"\n Get the tagger (author) of a tag\n\n @param tag a previously loaded tag.\n @return reference to the tag's author\n\n","file":"tag.h","sig":"git_tag *","args":[{"type":"git_tag *","comment":"","name":"t"}],"return":{"type":"const git_signature *","comment":"reference to the tag's author"},"comments":"@param tag a previously loaded tag.","argline":"git_tag *t","description":"Get the tagger (author) of a tag"},"git_odb_new":{"lineto":53,"line":42,"group":"odb","rawComments":"\n Create a new object database with no backends.\n\n Before the ODB can be used for read/writing, a custom database\n backend must be manually added using `git_odb_add_backend()`\n\n @param out location to store the database pointer, if opened.\n            Set to NULL if the open failed.\n @return GIT_SUCCESS if the database was created; otherwise an error\n         code describing why the open was not possible.\n\n","file":"odb.h","sig":"git_odb **","args":[{"type":"git_odb **","comment":"location to store the database pointer, if opened.             Set to NULL if the open failed.","name":"out"}],"return":{"type":"int","comment":"GIT_SUCCESS if the database was created; otherwise an error          code describing why the open was not possible."},"comments":"Before the ODB can be used for read/writing, a custom database\n backend must be manually added using `git_odb_add_backend()`","argline":"git_odb **out","description":"Create a new object database with no backends."},"git_commit_tree":{"lineto":136,"line":129,"group":"commit","rawComments":"\n Get the tree pointed to by a commit.\n\n @param tree_out pointer where to store the tree object\n @param commit a previously loaded commit.\n @return 0 on success; error code otherwise\n\n","file":"commit.h","sig":"git_tree **::git_commit *","args":[{"type":"git_tree **","comment":"pointer where to store the tree object","name":"tree_out"},{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"","argline":"git_tree **tree_out, git_commit *commit","description":"Get the tree pointed to by a commit."},"git_oid_allocfmt":{"lineto":101,"line":95,"group":"oid","rawComments":"\n Format a gid_oid into a newly allocated c-string.\n @param oid the oid structure to format\n @return the c-string; NULL if memory is exhausted.  Caller must\n         deallocate the string with free().\n\n","file":"oid.h","sig":"const git_oid *","args":[{"type":"const git_oid *","comment":"the oid structure to format","name":"oid"}],"return":{"type":"char *","comment":"the c-string; NULL if memory is exhausted.  Caller must          deallocate the string with free()."},"comments":"","argline":"const git_oid *oid","description":"Format a gid_oid into a newly allocated c-string."},"git_treebuilder_free":{"lineto":194,"line":185,"group":"treebuilder","rawComments":"\n Free a tree builder\n\n This will clear all the entries and free to builder.\n Failing to free the builder after you're done using it\n will result in a memory leak\n\n @param bld Builder to free\n\n","file":"tree.h","sig":"git_treebuilder *","args":[{"type":"git_treebuilder *","comment":"Builder to free","name":"bld"}],"return":{"type":"void","comment":""},"comments":"This will clear all the entries and free to builder.\n Failing to free the builder after you're done using it\n will result in a memory leak","argline":"git_treebuilder *bld","description":"Free a tree builder"},"git_tree_create_fromindex":{"lineto":157,"line":141,"group":"tree","rawComments":"\n Write a tree to the ODB from the index file\n\n This method will scan the index and write a representation\n of its current state back to disk; it recursively creates\n tree objects for each of the subtrees stored in the index,\n but only returns the OID of the root tree. This is the OID\n that can be used e.g. to create a commit.\n\n The index instance cannot be bare, and needs to be associated\n to an existing repository.\n\n @param oid Pointer where to store the written tree\n @param index Index to write\n @return 0 on success; error code otherwise\n\n","file":"tree.h","sig":"git_oid *::git_index *","args":[{"type":"git_oid *","comment":"Pointer where to store the written tree","name":"oid"},{"type":"git_index *","comment":"Index to write","name":"index"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"This method will scan the index and write a representation\n of its current state back to disk; it recursively creates\n tree objects for each of the subtrees stored in the index,\n but only returns the OID of the root tree. This is the OID\n that can be used e.g. to create a commit.\n\n The index instance cannot be bare, and needs to be associated\n to an existing repository.","argline":"git_oid *oid, git_index *index","description":"Write a tree to the ODB from the index file"},"git_commit_create_v":{"lineto":298,"line":276,"group":"commit","rawComments":"\n Create a new commit in the repository using\n a variable argument list.\n\n The parents for the commit are specified as a variable\n list of pointers to `const git_oid *`. Note that this\n is a convenience method which may not be safe to export\n for certain languages or compilers\n\n All other parameters remain the same\n\n @see git_commit_create\n\n","file":"commit.h","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const git_oid *::int::","args":[{"type":"git_oid *","comment":"","name":"oid"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"const char *","comment":"","name":"update_ref"},{"type":"const git_signature *","comment":"","name":"author"},{"type":"const git_signature *","comment":"","name":"committer"},{"type":"const char *","comment":"","name":"message"},{"type":"const git_oid *","comment":"","name":"tree_oid"},{"type":"int","comment":"","name":"parent_count"},{"type":"","comment":"","name":"..."}],"return":{"type":"int","comment":""},"comments":"The parents for the commit are specified as a variable\n list of pointers to `const git_oid *`. Note that this\n is a convenience method which may not be safe to export\n for certain languages or compilers\n\n All other parameters remain the same\n\n @see git_commit_create","argline":"git_oid *oid, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message, const git_oid *tree_oid, int parent_count, ...","description":"Create a new commit in the repository using a variable argument list."},"git_reference_lookup":{"lineto":52,"line":41,"group":"reference","rawComments":"\n Lookup a reference by its name in a repository.\n\n The generated reference is owned by the repository and\n should not be freed by the user.\n\n @param reference_out pointer to the looked-up reference\n @param repo the repository to look up the reference\n @param name the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)\n @return 0 on success; error code otherwise\n\n","file":"refs.h","sig":"git_reference **::git_repository *::const char *","args":[{"type":"git_reference **","comment":"pointer to the looked-up reference","name":"reference_out"},{"type":"git_repository *","comment":"the repository to look up the reference","name":"repo"},{"type":"const char *","comment":"the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)","name":"name"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The generated reference is owned by the repository and\n should not be freed by the user.","argline":"git_reference **reference_out, git_repository *repo, const char *name","description":"Lookup a reference by its name in a repository."},"git_odb_open_rstream":{"lineto":232,"line":208,"group":"odb","rawComments":"\n Open a stream to read an object from the ODB\n\n Note that most backends do *not* support streaming reads\n because they store their objects as compressed/delta'ed blobs.\n\n It's recommended to use `git_odb_read` instead, which is\n assured to work on all backends.\n\n The returned stream will be of type `GIT_STREAM_RDONLY` and\n will have the following methods:\n\n\t\t- stream->read: read `n` bytes from the stream\n\t\t- stream->free: free the stream\n\n The stream must always be free'd or will leak memory.\n\n @see git_odb_stream\n\n @param stream pointer where to store the stream\n @param db object database where the stream will read from\n @param oid oid of the object the stream will read from\n @return 0 if the stream was created; error code otherwise\n\n","file":"odb.h","sig":"git_odb_stream **::git_odb *::const git_oid *","args":[{"type":"git_odb_stream **","comment":"pointer where to store the stream","name":"stream"},{"type":"git_odb *","comment":"object database where the stream will read from","name":"db"},{"type":"const git_oid *","comment":"oid of the object the stream will read from","name":"oid"}],"return":{"type":"int","comment":"0 if the stream was created; error code otherwise"},"comments":"Note that most backends do *not* support streaming reads\n because they store their objects as compressed/delta'ed blobs.\n\n It's recommended to use `git_odb_read` instead, which is\n assured to work on all backends.\n\n The returned stream will be of type `GIT_STREAM_RDONLY` and\n will have the following methods:\n\n\t\t- stream->read: read `n` bytes from the stream\n\t\t- stream->free: free the stream\n\n The stream must always be free'd or will leak memory.\n\n @see git_odb_stream","argline":"git_odb_stream **stream, git_odb *db, const git_oid *oid","description":"Open a stream to read an object from the ODB"},"git_commit_committer":{"lineto":119,"line":113,"group":"commit","rawComments":"\n Get the committer of a commit.\n\n @param commit a previously loaded commit.\n @return the committer of a commit\n\n","file":"commit.h","sig":"git_commit *","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"return":{"type":"const git_signature *","comment":"the committer of a commit"},"comments":"","argline":"git_commit *commit","description":"Get the committer of a commit."},"git_reference_resolve":{"lineto":181,"line":168,"group":"reference","rawComments":"\n Resolve a symbolic reference\n\n Thie method iteratively peels a symbolic reference\n until it resolves to a direct reference to an OID.\n\n If a direct reference is passed as an argument,\n that reference is returned immediately\n\n @param resolved_ref Pointer to the peeled reference\n @param ref The reference\n @return 0 on success; error code otherwise\n\n","file":"refs.h","sig":"git_reference **::git_reference *","args":[{"type":"git_reference **","comment":"Pointer to the peeled reference","name":"resolved_ref"},{"type":"git_reference *","comment":"The reference","name":"ref"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Thie method iteratively peels a symbolic reference\n until it resolves to a direct reference to an OID.\n\n If a direct reference is passed as an argument,\n that reference is returned immediately","argline":"git_reference **resolved_ref, git_reference *ref","description":"Resolve a symbolic reference"},"git_reference_name":{"lineto":166,"line":160,"group":"reference","rawComments":"\n Get the full name of a reference\n\n @param ref The reference\n @return the full name for the ref\n\n","file":"refs.h","sig":"git_reference *","args":[{"type":"git_reference *","comment":"The reference","name":"ref"}],"return":{"type":"const char *","comment":"the full name for the ref"},"comments":"","argline":"git_reference *ref","description":"Get the full name of a reference"},"git_odb_exists":{"lineto":157,"line":148,"group":"odb","rawComments":"\n Determine if the given object can be found in the object database.\n\n @param db database to be searched for the given object.\n @param id the object to search for.\n @return\n - 1, if the object was found\n - 0, otherwise\n\n","file":"odb.h","sig":"git_odb *::const git_oid *","args":[{"type":"git_odb *","comment":"database to be searched for the given object.","name":"db"},{"type":"const git_oid *","comment":"the object to search for.","name":"id"}],"return":{"type":"int","comment":""},"comments":"@return\n - 1, if the object was found\n - 0, otherwise","argline":"git_odb *db, const git_oid *id","description":"Determine if the given object can be found in the object database."},"git_reference_create_symbolic_f":{"lineto":90,"line":71,"group":"reference","rawComments":"\n Create a new symbolic reference, overwriting an existing one with\n the same name, if it exists.\n\n If the new reference isn't a symbolic one, any pointers to the old\n reference become invalid.\n\n The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.\n\n @param ref_out Pointer to the newly created reference\n @param repo Repository where that reference will live\n @param name The name of the reference\n @param target The target of the reference\n @return 0 on success; error code otherwise\n\n","file":"refs.h","sig":"git_reference **::git_repository *::const char *::const char *","args":[{"type":"git_reference **","comment":"Pointer to the newly created reference","name":"ref_out"},{"type":"git_repository *","comment":"Repository where that reference will live","name":"repo"},{"type":"const char *","comment":"The name of the reference","name":"name"},{"type":"const char *","comment":"The target of the reference","name":"target"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"If the new reference isn't a symbolic one, any pointers to the old\n reference become invalid.\n\n The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.","argline":"git_reference **ref_out, git_repository *repo, const char *name, const char *target","description":"Create a new symbolic reference, overwriting an existing one with the same name, if it exists."},"git_tag_message":{"lineto":131,"line":125,"group":"tag","rawComments":"\n Get the message of a tag\n\n @param tag a previously loaded tag.\n @return message of the tag\n\n","file":"tag.h","sig":"git_tag *","args":[{"type":"git_tag *","comment":"","name":"t"}],"return":{"type":"const char *","comment":"message of the tag"},"comments":"@param tag a previously loaded tag.","argline":"git_tag *t","description":"Get the message of a tag"},"git_signature_now":{"lineto":60,"line":52,"group":"signature","rawComments":"\n Create a new action signature with a timestamp of 'now'. The\n signature must be freed manually or using git_signature_free\n\n @param name name of the person\n @param email email of the person\n @return the new sig, NULL on out of memory\n\n","file":"signature.h","sig":"const char *::const char *","args":[{"type":"const char *","comment":"name of the person","name":"name"},{"type":"const char *","comment":"email of the person","name":"email"}],"return":{"type":"git_signature *","comment":"the new sig, NULL on out of memory"},"comments":"","argline":"const char *name, const char *email","description":"Create a new action signature with a timestamp of 'now'. The signature must be freed manually or using git_signature_free"},"git_reference_owner":{"lineto":189,"line":183,"group":"reference","rawComments":"\n Get the repository where a reference resides\n\n @param ref The reference\n @return a pointer to the repo\n\n","file":"refs.h","sig":"git_reference *","args":[{"type":"git_reference *","comment":"The reference","name":"ref"}],"return":{"type":"git_repository *","comment":"a pointer to the repo"},"comments":"","argline":"git_reference *ref","description":"Get the repository where a reference resides"},"git_reference_packall":{"lineto":275,"line":259,"group":"reference","rawComments":"\n Pack all the loose references in the repository\n\n This method will load into the cache all the loose\n references on the repository and update the\n `packed-refs` file with them.\n\n Once the `packed-refs` file has been written properly,\n the loose references will be removed from disk.\n\n WARNING: calling this method may invalidate any existing\n references previously loaded on the cache.\n\n @param repo Repository where the loose refs will be packed\n @return 0 on success; error code otherwise\n\n","file":"refs.h","sig":"git_repository *","args":[{"type":"git_repository *","comment":"Repository where the loose refs will be packed","name":"repo"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"This method will load into the cache all the loose\n references on the repository and update the\n `packed-refs` file with them.\n\n Once the `packed-refs` file has been written properly,\n the loose references will be removed from disk.\n\n WARNING: calling this method may invalidate any existing\n references previously loaded on the cache.","argline":"git_repository *repo","description":"Pack all the loose references in the repository"},"git_strerror":{"lineto":145,"line":135,"group":"errors","rawComments":"\n strerror() for the Git library\n\n Get a string description for a given error code.\n NOTE: This method will be eventually deprecated in favor\n of the new `git_lasterror`.\n\n @param num The error code to explain\n @return a string explaining the error code\n\n","file":"errors.h","sig":"int","args":[{"type":"int","comment":"The error code to explain","name":"num"}],"return":{"type":"const char *","comment":"a string explaining the error code"},"comments":"Get a string description for a given error code.\n NOTE: This method will be eventually deprecated in favor\n of the new `git_lasterror`.","argline":"int num","description":"strerror() for the Git library"},"git_oid_pathfmt":{"lineto":93,"line":80,"group":"oid","rawComments":"\n Format a git_oid into a loose-object path string.\n <p>\n The resulting string is \"aa/...\", where \"aa\" is the first two\n hex digitis of the oid and \"...\" is the remaining 38 digits.\n\n @param str output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (41 bytes).  Only the\n        oid digits are written; a '\\\\0' terminator must be added\n        by the caller if it is required.\n @param oid oid structure to format.\n\n","file":"oid.h","sig":"char *::const git_oid *","args":[{"type":"char *","comment":"output hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (41 bytes).  Only the         oid digits are written; a '\\\\0' terminator must be added         by the caller if it is required.","name":"str"},{"type":"const git_oid *","comment":"oid structure to format.","name":"oid"}],"return":{"type":"void","comment":""},"comments":"","argline":"char *str, const git_oid *oid","description":"Format a git_oid into a loose-object path string. <p> The resulting string is \"aa/...\", where \"aa\" is the first two hex digitis of the oid and \"...\" is the remaining 38 digits."},"git_index_remove":{"lineto":244,"line":237,"group":"index","rawComments":"\n Remove an entry from the index\n\n @param index an existing index object\n @param position position of the entry to remove\n @return 0 on success, otherwise an error code\n\n","file":"index.h","sig":"git_index *::int","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"int","comment":"position of the entry to remove","name":"position"}],"return":{"type":"int","comment":"0 on success, otherwise an error code"},"comments":"","argline":"git_index *index, int position","description":"Remove an entry from the index"},"git_blob_rawsize":{"lineto":92,"line":86,"group":"blob","rawComments":"\n Get the size in bytes of the contents of a blob\n\n @param blob pointer to the blob\n @return size on bytes\n\n","file":"blob.h","sig":"git_blob *","args":[{"type":"git_blob *","comment":"pointer to the blob","name":"blob"}],"return":{"type":"int","comment":"size on bytes"},"comments":"","argline":"git_blob *blob","description":"Get the size in bytes of the contents of a blob"},"git_revwalk_sorting":{"lineto":167,"line":158,"group":"revwalk","rawComments":"\n Change the sorting mode when iterating through the\n repository's contents.\n\n Changing the sorting mode resets the walker.\n\n @param walk the walker being used for the traversal.\n @param sort_mode combination of GIT_SORT_XXX flags\n\n","file":"revwalk.h","sig":"git_revwalk *::unsigned int","args":[{"type":"git_revwalk *","comment":"the walker being used for the traversal.","name":"walk"},{"type":"unsigned int","comment":"combination of GIT_SORT_XXX flags","name":"sort_mode"}],"return":{"type":"void","comment":""},"comments":"Changing the sorting mode resets the walker.","argline":"git_revwalk *walk, unsigned int sort_mode","description":"Change the sorting mode when iterating through the repository's contents."},"git_odb_backend_pack":{"lineto":101,"line":93,"group":"odb","rawComments":" Streaming mode ","file":"odb_backend.h","sig":"git_odb_backend **::const char *","args":[{"type":"git_odb_backend **","comment":"","name":"backend_out"},{"type":"const char *","comment":"","name":"objects_dir"}],"return":{"type":"int","comment":""},"comments":"","argline":"git_odb_backend **backend_out, const char *objects_dir","description":"Streaming mode"},"git_commit_close":{"lineto":71,"line":56,"group":"commit","rawComments":"\n Close an open commit\n\n This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a commit. Failure to do so will cause a memory leak.\n\n @param commit the commit to close\n\n","file":"commit.h","sig":"git_commit *","args":[{"type":"git_commit *","comment":"the commit to close","name":"commit"}],"return":{"type":"void","comment":""},"comments":"This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a commit. Failure to do so will cause a memory leak.","argline":"git_commit *commit","description":"Close an open commit"},"git_reference_rename_f":{"lineto":246,"line":234,"group":"reference","rawComments":"\n Rename an existing reference, overwriting an existing one with the\n same name, if it exists.\n\n This method works for both direct and symbolic references.\n The new name will be checked for validity and may be\n modified into a normalized form.\n\n The refernece will be immediately renamed in-memory\n and on disk.\n\n\n","file":"refs.h","sig":"git_reference *::const char *","args":[{"type":"git_reference *","comment":"","name":"ref"},{"type":"const char *","comment":"","name":"new_name"}],"return":{"type":"int","comment":""},"comments":"This method works for both direct and symbolic references.\n The new name will be checked for validity and may be\n modified into a normalized form.\n\n The refernece will be immediately renamed in-memory\n and on disk.","argline":"git_reference *ref, const char *new_name","description":"Rename an existing reference, overwriting an existing one with the same name, if it exists."},"git_tree_entry_byindex":{"lineto":105,"line":98,"group":"tree","rawComments":"\n Lookup a tree entry by its position in the tree\n\n @param tree a previously loaded tree.\n @param idx the position in the entry list\n @return the tree entry; NULL if not found\n\n","file":"tree.h","sig":"git_tree *::int","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"},{"type":"int","comment":"the position in the entry list","name":"idx"}],"return":{"type":"const git_tree_entry *","comment":"the tree entry; NULL if not found"},"comments":"","argline":"git_tree *tree, int idx","description":"Lookup a tree entry by its position in the tree"},"git_tree_id":{"lineto":79,"line":73,"group":"tree","rawComments":"\n Get the id of a tree.\n\n @param tree a previously loaded tree.\n @return object identity for the tree.\n\n","file":"tree.h","sig":"git_tree *","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"}],"return":{"type":"const git_oid *","comment":"object identity for the tree."},"comments":"","argline":"git_tree *tree","description":"Get the id of a tree."},"git_tag_lookup":{"lineto":53,"line":42,"group":"tag","rawComments":"\n Lookup a tag object from the repository.\n\n @param tag pointer to the looked up tag\n @param repo the repo to use when locating the tag.\n @param id identity of the tag to locate.\n @return 0 on success; error code otherwise\n\n","file":"tag.h","sig":"git_tag **::git_repository *::const git_oid *","args":[{"type":"git_tag **","comment":"pointer to the looked up tag","name":"tag"},{"type":"git_repository *","comment":"the repo to use when locating the tag.","name":"repo"},{"type":"const git_oid *","comment":"identity of the tag to locate.","name":"id"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"","argline":"git_tag **tag, git_repository *repo, const git_oid *id","description":"Lookup a tag object from the repository."},"git_commit_parent":{"lineto":164,"line":156,"group":"commit","rawComments":"\n Get the specified parent of the commit.\n\n @param parent Pointer where to store the parent commit\n @param commit a previously loaded commit.\n @param n the position of the parent (from 0 to `parentcount`)\n @return 0 on success; error code otherwise\n\n","file":"commit.h","sig":"git_commit **::git_commit *::unsigned int","args":[{"type":"git_commit **","comment":"Pointer where to store the parent commit","name":"parent"},{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"},{"type":"unsigned int","comment":"the position of the parent (from 0 to `parentcount`)","name":"n"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"","argline":"git_commit **parent, git_commit *commit, unsigned int n","description":"Get the specified parent of the commit."},"git_commit_id":{"lineto":79,"line":73,"group":"commit","rawComments":"\n Get the id of a commit.\n\n @param commit a previously loaded commit.\n @return object identity for the commit.\n\n","file":"commit.h","sig":"git_commit *","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"return":{"type":"const git_oid *","comment":"object identity for the commit."},"comments":"","argline":"git_commit *commit","description":"Get the id of a commit."},"git_index_find":{"lineto":172,"line":164,"group":"index","rawComments":"\n Find the first index of any entries which point to given\n path in the Git index.\n\n @param index an existing index object\n @param path path to search\n @return an index >= 0 if found, -1 otherwise\n\n","file":"index.h","sig":"git_index *::const char *","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const char *","comment":"path to search","name":"path"}],"return":{"type":"int","comment":"an index >= 0 if found, -1 otherwise"},"comments":"","argline":"git_index *index, const char *path","description":"Find the first index of any entries which point to given path in the Git index."},"git_odb_backend_loose":{"lineto":102,"line":102,"group":"odb","rawComments":"","file":"odb_backend.h","sig":"git_odb_backend **::const char *","args":[{"type":"git_odb_backend **","comment":"","name":"backend_out"},{"type":"const char *","comment":"","name":"objects_dir"}],"return":{"type":"int","comment":""},"comments":"","argline":"git_odb_backend **backend_out, const char *objects_dir","description":""},"git_lasterror":{"lineto":133,"line":128,"group":"errors","rawComments":"\n Return a detailed error string with the latest error\n that occurred in the library.\n @return a string explaining the error\n\n","file":"errors.h","sig":"","args":[{"type":"","comment":"","name":"void"}],"return":{"type":"const char *","comment":"a string explaining the error"},"comments":"","argline":"void","description":"Return a detailed error string with the latest error that occurred in the library."},"git_commit_parent_oid":{"lineto":175,"line":166,"group":"commit","rawComments":"\n Get the oid of a specified parent for a commit. This is different from\n `git_commit_parent`, which will attempt to load the parent commit from\n the ODB.\n\n @param commit a previously loaded commit.\n @param n the position of the parent (from 0 to `parentcount`)\n @return the id of the parent, NULL on error.\n\n","file":"commit.h","sig":"git_commit *::unsigned int","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"},{"type":"unsigned int","comment":"the position of the parent (from 0 to `parentcount`)","name":"n"}],"return":{"type":"const git_oid *","comment":"the id of the parent, NULL on error."},"comments":"","argline":"git_commit *commit, unsigned int n","description":"Get the oid of a specified parent for a commit. This is different from `git_commit_parent`, which will attempt to load the parent commit from the ODB."},"git_tag_target_oid":{"lineto":99,"line":93,"group":"tag","rawComments":"\n Get the OID of the tagged object of a tag\n\n @param tag a previously loaded tag.\n @return pointer to the OID\n\n","file":"tag.h","sig":"git_tag *","args":[{"type":"git_tag *","comment":"","name":"t"}],"return":{"type":"const git_oid *","comment":"pointer to the OID"},"comments":"@param tag a previously loaded tag.","argline":"git_tag *t","description":"Get the OID of the tagged object of a tag"},"git_signature_free":{"lineto":77,"line":72,"group":"signature","rawComments":"\n Free an existing signature\n\n @param sig signature to free\n\n","file":"signature.h","sig":"git_signature *","args":[{"type":"git_signature *","comment":"signature to free","name":"sig"}],"return":{"type":"void","comment":""},"comments":"","argline":"git_signature *sig","description":"Free an existing signature"},"git_odb_read_header":{"lineto":146,"line":128,"group":"odb","rawComments":"\n Read the header of an object from the database, without\n reading its full contents.\n\n The header includes the length and the type of an object.\n\n Note that most backends do not support reading only the header\n of an object, so the whole object will be read and then the\n header will be returned.\n\n @param len_p pointer where to store the length\n @param type_p pointer where to store the type\n @param db database to search for the object in.\n @param id identity of the object to read.\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.\n\n","file":"odb.h","sig":"size_t *::git_otype *::git_odb *::const git_oid *","args":[{"type":"size_t *","comment":"pointer where to store the length","name":"len_p"},{"type":"git_otype *","comment":"pointer where to store the type","name":"type_p"},{"type":"git_odb *","comment":"database to search for the object in.","name":"db"},{"type":"const git_oid *","comment":"identity of the object to read.","name":"id"}],"return":{"type":"int","comment":""},"comments":"The header includes the length and the type of an object.\n\n Note that most backends do not support reading only the header\n of an object, so the whole object will be read and then the\n header will be returned.\n\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.","argline":"size_t *len_p, git_otype *type_p, git_odb *db, const git_oid *id","description":"Read the header of an object from the database, without reading its full contents."},"git_repository_open":{"lineto":64,"line":41,"group":"repository","rawComments":"\n Open a git repository.\n\n The 'path' argument must point to an existing git repository\n folder, e.g.\n\n\t\t/path/to/my_repo/.git/\t(normal repository)\n\t\t\t\t\t\t\tobjects/\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t\tHEAD\n\n\t\t/path/to/bare_repo/\t\t(bare repository)\n\t\t\t\t\t\tobjects/\n\t\t\t\t\t\tindex\n\t\t\t\t\t\tHEAD\n\n\tThe method will automatically detect if 'path' is a normal\n\tor bare repository or fail is 'path' is neither.\n\n @param repository pointer to the repo which will be opened\n @param path the path to the repository\n @return 0 on success; error code otherwise\n\n","file":"repository.h","sig":"git_repository **::const char *","args":[{"type":"git_repository **","comment":"pointer to the repo which will be opened","name":"repository"},{"type":"const char *","comment":"the path to the repository","name":"path"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The 'path' argument must point to an existing git repository\n folder, e.g.\n\n\t\t/path/to/my_repo/.git/\t(normal repository)\n\t\t\t\t\t\t\tobjects/\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t\tHEAD\n\n\t\t/path/to/bare_repo/\t\t(bare repository)\n\t\t\t\t\t\tobjects/\n\t\t\t\t\t\tindex\n\t\t\t\t\t\tHEAD\n\n\tThe method will automatically detect if 'path' is a normal\n\tor bare repository or fail is 'path' is neither.","argline":"git_repository **repository, const char *path","description":"Open a git repository."},"git_index_read":{"lineto":153,"line":146,"group":"index","rawComments":"\n Update the contents of an existing index object in memory\n by reading from the hard disk.\n\n @param index an existing index object\n @return 0 on success, otherwise an error code\n\n","file":"index.h","sig":"git_index *","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"return":{"type":"int","comment":"0 on success, otherwise an error code"},"comments":"","argline":"git_index *index","description":"Update the contents of an existing index object in memory by reading from the hard disk."},"git_commit_author":{"lineto":127,"line":121,"group":"commit","rawComments":"\n Get the author of a commit.\n\n @param commit a previously loaded commit.\n @return the author of a commit\n\n","file":"commit.h","sig":"git_commit *","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"return":{"type":"const git_signature *","comment":"the author of a commit"},"comments":"","argline":"git_commit *commit","description":"Get the author of a commit."},"git_odb_write":{"lineto":177,"line":159,"group":"odb","rawComments":"\n Write an object directly into the ODB\n\n This method writes a full object straight into the ODB.\n For most cases, it is preferred to write objects through a write\n stream, which is both faster and less memory intensive, specially\n for big objects.\n\n This method is provided for compatibility with custom backends\n which are not able to support streaming writes\n\n @param oid pointer to store the OID result of the write\n @param odb object database where to store the object\n @param data buffer with the data to storr\n @param len size of the buffer\n @param type type of the data to store\n @return 0 on success; error code otherwise\n\n","file":"odb.h","sig":"git_oid *::git_odb *::const void *::size_t::git_otype","args":[{"type":"git_oid *","comment":"pointer to store the OID result of the write","name":"oid"},{"type":"git_odb *","comment":"object database where to store the object","name":"odb"},{"type":"const void *","comment":"buffer with the data to storr","name":"data"},{"type":"size_t","comment":"size of the buffer","name":"len"},{"type":"git_otype","comment":"type of the data to store","name":"type"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"This method writes a full object straight into the ODB.\n For most cases, it is preferred to write objects through a write\n stream, which is both faster and less memory intensive, specially\n for big objects.\n\n This method is provided for compatibility with custom backends\n which are not able to support streaming writes","argline":"git_oid *oid, git_odb *odb, const void *data, size_t len, git_otype type","description":"Write an object directly into the ODB"},"git_reference_listall":{"lineto":298,"line":277,"group":"reference","rawComments":"\n Fill a list with all the references that can be found\n in a repository.\n\n The listed references may be filtered by type, or using\n a bitwise OR of several types. Use the magic value\n `GIT_REF_LISTALL` to obtain all references, including\n packed ones.\n\n The string array will be filled with the names of all\n references; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`.\n\n @param array Pointer to a git_strarray structure where\n\t\tthe reference names will be stored\n @param repo Repository where to find the refs\n @param list_flags Filtering flags for the reference\n\t\tlisting.\n @return 0 on success; error code otherwise\n\n","file":"refs.h","sig":"git_strarray *::git_repository *::unsigned int","args":[{"type":"git_strarray *","comment":"Pointer to a git_strarray structure where   the reference names will be stored","name":"array"},{"type":"git_repository *","comment":"Repository where to find the refs","name":"repo"},{"type":"unsigned int","comment":"Filtering flags for the reference   listing.","name":"list_flags"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The listed references may be filtered by type, or using\n a bitwise OR of several types. Use the magic value\n `GIT_REF_LISTALL` to obtain all references, including\n packed ones.\n\n The string array will be filled with the names of all\n references; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`.","argline":"git_strarray *array, git_repository *repo, unsigned int list_flags","description":"Fill a list with all the references that can be found in a repository."},"git_odb_open_wstream":{"lineto":206,"line":179,"group":"odb","rawComments":"\n Open a stream to write an object into the ODB\n\n The type and final length of the object must be specified\n when opening the stream.\n\n The returned stream will be of type `GIT_STREAM_WRONLY` and\n will have the following methods:\n\n\t\t- stream->write: write `n` bytes into the stream\n\t\t- stream->finalize_write: close the stream and store the object in\n\t\t\tthe odb\n\t\t- stream->free: free the stream\n\n The streaming write won't be effective until `stream->finalize_write`\n is called and returns without an error\n\n The stream must always be free'd or will leak memory.\n\n @see git_odb_stream\n\n @param stream pointer where to store the stream\n @param db object database where the stream will write\n @param size final size of the object that will be written\n @param type type of the object that will be written\n @return 0 if the stream was created; error code otherwise\n\n","file":"odb.h","sig":"git_odb_stream **::git_odb *::size_t::git_otype","args":[{"type":"git_odb_stream **","comment":"pointer where to store the stream","name":"stream"},{"type":"git_odb *","comment":"object database where the stream will write","name":"db"},{"type":"size_t","comment":"final size of the object that will be written","name":"size"},{"type":"git_otype","comment":"type of the object that will be written","name":"type"}],"return":{"type":"int","comment":"0 if the stream was created; error code otherwise"},"comments":"The type and final length of the object must be specified\n when opening the stream.\n\n The returned stream will be of type `GIT_STREAM_WRONLY` and\n will have the following methods:\n\n\t\t- stream->write: write `n` bytes into the stream\n\t\t- stream->finalize_write: close the stream and store the object in\n\t\t\tthe odb\n\t\t- stream->free: free the stream\n\n The streaming write won't be effective until `stream->finalize_write`\n is called and returns without an error\n\n The stream must always be free'd or will leak memory.\n\n @see git_odb_stream","argline":"git_odb_stream **stream, git_odb *db, size_t size, git_otype type","description":"Open a stream to write an object into the ODB"},"git_repository_path":{"lineto":203,"line":197,"group":"repository","rawComments":"\n Get the normalized path to the git repository.\n\n @param repo a repository object\n @return absolute path to the git directory\n\n","file":"repository.h","sig":"git_repository *","args":[{"type":"git_repository *","comment":"a repository object","name":"repo"}],"return":{"type":"const char *","comment":"absolute path to the git directory"},"comments":"","argline":"git_repository *repo","description":"Get the normalized path to the git repository."},"git_tag_type":{"lineto":107,"line":101,"group":"tag","rawComments":"\n Get the type of a tag's tagged object\n\n @param tag a previously loaded tag.\n @return type of the tagged object\n\n","file":"tag.h","sig":"git_tag *","args":[{"type":"git_tag *","comment":"","name":"t"}],"return":{"type":"git_otype","comment":"type of the tagged object"},"comments":"@param tag a previously loaded tag.","argline":"git_tag *t","description":"Get the type of a tag's tagged object"},"git_odb_read":{"lineto":126,"line":109,"group":"odb","rawComments":"\n Read an object from the database.\n\n This method queries all avaiable ODB backends\n trying to read the given OID.\n\n The returned object is reference counted and\n internally cached, so it should be closed\n by the user once it's no longer in use.\n\n @param out pointer where to store the read object\n @param db database to search for the object in.\n @param id identity of the object to read.\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.\n\n","file":"odb.h","sig":"git_odb_object **::git_odb *::const git_oid *","args":[{"type":"git_odb_object **","comment":"pointer where to store the read object","name":"out"},{"type":"git_odb *","comment":"database to search for the object in.","name":"db"},{"type":"const git_oid *","comment":"identity of the object to read.","name":"id"}],"return":{"type":"int","comment":""},"comments":"This method queries all avaiable ODB backends\n trying to read the given OID.\n\n The returned object is reference counted and\n internally cached, so it should be closed\n by the user once it's no longer in use.\n\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.","argline":"git_odb_object **out, git_odb *db, const git_oid *id","description":"Read an object from the database."},"git_reference_set_oid":{"lineto":219,"line":206,"group":"reference","rawComments":"\n Set the OID target of a reference.\n\n The reference must be a direct reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.\n\n @param ref The reference\n @param target The new target OID for the reference\n @return 0 on success; error code otherwise\n\n","file":"refs.h","sig":"git_reference *::const git_oid *","args":[{"type":"git_reference *","comment":"The reference","name":"ref"},{"type":"const git_oid *","comment":"","name":"id"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The reference must be a direct reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.\n\n @param target The new target OID for the reference","argline":"git_reference *ref, const git_oid *id","description":"Set the OID target of a reference."},"git_index_open_bare":{"lineto":118,"line":105,"group":"index","rawComments":"\n Create a new Git index object as a memory representation\n of the Git index file in 'index_path', without a repository\n to back it.\n\n Since there is no ODB behind this index, any Index methods\n which rely on the ODB (e.g. index_add) will fail with the\n GIT_EBAREINDEX error code.\n\n @param index the pointer for the new index\n @param index_path the path to the index file in disk\n @return 0 on success; error code otherwise\n\n","file":"index.h","sig":"git_index **::const char *","args":[{"type":"git_index **","comment":"the pointer for the new index","name":"index"},{"type":"const char *","comment":"the path to the index file in disk","name":"index_path"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"Since there is no ODB behind this index, any Index methods\n which rely on the ODB (e.g. index_add) will fail with the\n GIT_EBAREINDEX error code.","argline":"git_index **index, const char *index_path","description":"Create a new Git index object as a memory representation of the Git index file in 'index_path', without a repository to back it."},"git_tree_entry_name":{"lineto":121,"line":115,"group":"tree","rawComments":"\n Get the filename of a tree entry\n\n @param entry a tree entry\n @return the name of the file\n\n","file":"tree.h","sig":"const git_tree_entry *","args":[{"type":"const git_tree_entry *","comment":"a tree entry","name":"entry"}],"return":{"type":"const char *","comment":"the name of the file"},"comments":"","argline":"const git_tree_entry *entry","description":"Get the filename of a tree entry"},"git_object__size":{"lineto":142,"line":130,"group":"object","rawComments":"\n Get the size in bytes for the structure which\n acts as an in-memory representation of any given\n object type.\n\n For all the core types, this would the equivalent\n of calling `sizeof(git_commit)` if the core types\n were not opaque on the external API.\n\n @param type object type to get its size\n @return size in bytes of the object\n\n","file":"object.h","sig":"git_otype","args":[{"type":"git_otype","comment":"object type to get its size","name":"type"}],"return":{"type":"size_t","comment":"size in bytes of the object"},"comments":"For all the core types, this would the equivalent\n of calling `sizeof(git_commit)` if the core types\n were not opaque on the external API.","argline":"git_otype type","description":"Get the size in bytes for the structure which acts as an in-memory representation of any given object type."},"git_commit_lookup":{"lineto":54,"line":42,"group":"commit","rawComments":"\n Lookup a commit object from a repository.\n\n @param commit pointer to the looked up commit\n @param repo the repo to use when locating the commit.\n @param id identity of the commit to locate.  If the object is\n        an annotated tag it will be peeled back to the commit.\n @return 0 on success; error code otherwise\n\n","file":"commit.h","sig":"git_commit **::git_repository *::const git_oid *","args":[{"type":"git_commit **","comment":"pointer to the looked up commit","name":"commit"},{"type":"git_repository *","comment":"the repo to use when locating the commit.","name":"repo"},{"type":"const git_oid *","comment":"identity of the commit to locate.  If the object is         an annotated tag it will be peeled back to the commit.","name":"id"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"","argline":"git_commit **commit, git_repository *repo, const git_oid *id","description":"Lookup a commit object from a repository."},"git_reference_listcb":{"lineto":321,"line":301,"group":"reference","rawComments":"\n List all the references in the repository, calling a custom\n callback for each one.\n\n The listed references may be filtered by type, or using\n a bitwise OR of several types. Use the magic value\n `GIT_REF_LISTALL` to obtain all references, including\n packed ones.\n\n The `callback` function will be called for each of the references\n in the repository, and will receive the name of the reference and\n the `payload` value passed to this method.\n\n @param repo Repository where to find the refs\n @param list_flags Filtering flags for the reference\n\t\tlisting.\n @param callback Function which will be called for every listed ref\n @param payload Additional data to pass to the callback\n @return 0 on success; error code otherwise\n\n","file":"refs.h","sig":"git_repository *::unsigned int::int(*)(const char *, void *)::void *","args":[{"type":"git_repository *","comment":"Repository where to find the refs","name":"repo"},{"type":"unsigned int","comment":"Filtering flags for the reference   listing.","name":"list_flags"},{"type":"int(*)(const char *, void *)","comment":"Function which will be called for every listed ref","name":"callback"},{"type":"void *","comment":"Additional data to pass to the callback","name":"payload"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"The listed references may be filtered by type, or using\n a bitwise OR of several types. Use the magic value\n `GIT_REF_LISTALL` to obtain all references, including\n packed ones.\n\n The `callback` function will be called for each of the references\n in the repository, and will receive the name of the reference and\n the `payload` value passed to this method.","argline":"git_repository *repo, unsigned int list_flags, int (*callback)(const char *, void *), void *payload","description":"List all the references in the repository, calling a custom callback for each one."},"git_object_owner":{"lineto":83,"line":77,"group":"object","rawComments":"\n Get the repository that owns this object\n\n @param obj the object\n @return the repository who owns this object\n\n","file":"object.h","sig":"const git_object *","args":[{"type":"const git_object *","comment":"the object","name":"obj"}],"return":{"type":"git_repository *","comment":"the repository who owns this object"},"comments":"","argline":"const git_object *obj","description":"Get the repository that owns this object"},"git_commit_message_short":{"lineto":87,"line":81,"group":"commit","rawComments":"\n Get the short (one line) message of a commit.\n\n @param commit a previously loaded commit.\n @return the short message of a commit\n\n","file":"commit.h","sig":"git_commit *","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"return":{"type":"const char *","comment":"the short message of a commit"},"comments":"","argline":"git_commit *commit","description":"Get the short (one line) message of a commit."},"git_oid_fmt":{"lineto":78,"line":69,"group":"oid","rawComments":"\n Format a git_oid into a hex string.\n @param str output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes).  Only the\n        oid digits are written; a '\\\\0' terminator must be added\n        by the caller if it is required.\n @param oid oid structure to format.\n\n","file":"oid.h","sig":"char *::const git_oid *","args":[{"type":"char *","comment":"output hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (40 bytes).  Only the         oid digits are written; a '\\\\0' terminator must be added         by the caller if it is required.","name":"str"},{"type":"const git_oid *","comment":"oid structure to format.","name":"oid"}],"return":{"type":"void","comment":""},"comments":"","argline":"char *str, const git_oid *oid","description":"Format a git_oid into a hex string."},"git_commit_tree_oid":{"lineto":146,"line":138,"group":"commit","rawComments":"\n Get the id of the tree pointed to by a commit. This differs from\n `git_commit_tree` in that no attempts are made to fetch an object\n from the ODB.\n\n @param commit a previously loaded commit.\n @return the id of tree pointed to by commit.\n\n","file":"commit.h","sig":"git_commit *","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"return":{"type":"const git_oid *","comment":"the id of tree pointed to by commit."},"comments":"","argline":"git_commit *commit","description":"Get the id of the tree pointed to by a commit. This differs from `git_commit_tree` in that no attempts are made to fetch an object from the ODB."},"git_repository_is_empty":{"lineto":195,"line":185,"group":"repository","rawComments":"\n Check if a repository is empty\n\n An empty repository has just been initialized and contains\n no commits.\n\n @param repo Repo to test\n @return 1 if the repository is empty, 0 if it isn't, error code\n if the repository is corrupted\n\n","file":"repository.h","sig":"git_repository *","args":[{"type":"git_repository *","comment":"Repo to test","name":"repo"}],"return":{"type":"int","comment":"1 if the repository is empty, 0 if it isn't, error code  if the repository is corrupted"},"comments":"An empty repository has just been initialized and contains\n no commits.","argline":"git_repository *repo","description":"Check if a repository is empty"},"git_reference_delete":{"lineto":257,"line":248,"group":"reference","rawComments":"\n Delete an existing reference\n\n This method works for both direct and symbolic references.\n\n The reference will be immediately removed on disk and from\n memory. The given reference pointer will no longer be valid.\n\n\n","file":"refs.h","sig":"git_reference *","args":[{"type":"git_reference *","comment":"","name":"ref"}],"return":{"type":"int","comment":""},"comments":"This method works for both direct and symbolic references.\n\n The reference will be immediately removed on disk and from\n memory. The given reference pointer will no longer be valid.","argline":"git_reference *ref","description":"Delete an existing reference"},"git_odb_object_type":{"lineto":298,"line":292,"group":"odb","rawComments":"\n Return the type of an ODB object\n\n @param object the object\n @return the type\n\n","file":"odb.h","sig":"git_odb_object *","args":[{"type":"git_odb_object *","comment":"the object","name":"object"}],"return":{"type":"git_otype","comment":"the type"},"comments":"","argline":"git_odb_object *object","description":"Return the type of an ODB object"},"git_odb_object_size":{"lineto":290,"line":281,"group":"odb","rawComments":"\n Return the size of an ODB object\n\n This is the real size of the `data` buffer, not the\n actual size of the object.\n\n @param object the object\n @return the size\n\n","file":"odb.h","sig":"git_odb_object *","args":[{"type":"git_odb_object *","comment":"the object","name":"object"}],"return":{"type":"size_t","comment":"the size"},"comments":"This is the real size of the `data` buffer, not the\n actual size of the object.","argline":"git_odb_object *object","description":"Return the size of an ODB object"},"git_odb_object_close":{"lineto":256,"line":248,"group":"odb","rawComments":"\n Close an ODB object\n\n This method must always be called once a `git_odb_object` is no\n longer needed, otherwise memory will leak.\n\n @param object object to close\n\n","file":"odb.h","sig":"git_odb_object *","args":[{"type":"git_odb_object *","comment":"object to close","name":"object"}],"return":{"type":"void","comment":""},"comments":"This method must always be called once a `git_odb_object` is no\n longer needed, otherwise memory will leak.","argline":"git_odb_object *object","description":"Close an ODB object"},"git_blob_create_frombuffer":{"lineto":117,"line":108,"group":"blob","rawComments":"\n Write an in-memory buffer to the ODB as a blob\n\n @param oid return the oid of the written blob\n @param repo repository where to blob will be written\n @param buffer data to be written into the blob\n @param len length of the data\n @return 0 on success; error code otherwise\n\n","file":"blob.h","sig":"git_oid *::git_repository *::const void *::size_t","args":[{"type":"git_oid *","comment":"return the oid of the written blob","name":"oid"},{"type":"git_repository *","comment":"repository where to blob will be written","name":"repo"},{"type":"const void *","comment":"data to be written into the blob","name":"buffer"},{"type":"size_t","comment":"length of the data","name":"len"}],"return":{"type":"int","comment":"0 on success; error code otherwise"},"comments":"","argline":"git_oid *oid, git_repository *repo, const void *buffer, size_t len","description":"Write an in-memory buffer to the ODB as a blob"},"git_oid_to_string":{"lineto":118,"line":103,"group":"oid","rawComments":"\n Format a git_oid into a buffer as a hex format c-string.\n <p>\n If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\n oid c-string will be truncated to n-1 characters. If there are\n any input parameter errors (out == NULL, n == 0, oid == NULL),\n then a pointer to an empty string is returned, so that the return\n value can always be printed.\n\n @param out the buffer into which the oid string is output.\n @param n the size of the out buffer.\n @param oid the oid structure to format.\n @return the out buffer pointer, assuming no input parameter\n         errors, otherwise a pointer to an empty string.\n\n","file":"oid.h","sig":"char *::size_t::const git_oid *","args":[{"type":"char *","comment":"the buffer into which the oid string is output.","name":"out"},{"type":"size_t","comment":"the size of the out buffer.","name":"n"},{"type":"const git_oid *","comment":"the oid structure to format.","name":"oid"}],"return":{"type":"char *","comment":"the out buffer pointer, assuming no input parameter          errors, otherwise a pointer to an empty string."},"comments":"","argline":"char *out, size_t n, const git_oid *oid","description":"Format a git_oid into a buffer as a hex format c-string. <p> If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting oid c-string will be truncated to n-1 characters. If there are any input parameter errors (out == NULL, n == 0, oid == NULL), then a pointer to an empty string is returned, so that the return value can always be printed."},"git_index_entrycount":{"lineto":265,"line":259,"group":"index","rawComments":"\n Get the count of entries currently in the index\n\n @param index an existing index object\n @return integer of count of current entries\n\n","file":"index.h","sig":"git_index *","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"return":{"type":"unsigned int","comment":"integer of count of current entries"},"comments":"","argline":"git_index *index","description":"Get the count of entries currently in the index"},"git_tag_create_f":{"lineto":241,"line":206,"group":"tag","rawComments":"\n Create a new tag in the repository from an OID\n and overwrite an already existing tag reference, if any.\n\n @param oid Pointer where to store the OID of the\n\tnewly created tag\n\n @param repo Repository where to store the tag\n\n @param tag_name Name for the tag; this name is validated\n for consistency.\n\n @param target OID to which this tag points; note that no\n\tvalidation is done on this OID. Use the _fo version of this\n\tmethod to assure a proper object is being tagged\n\n @param target_type Type of the tagged OID; note that no\n\tvalidation is performed here either\n\n @param tagger Signature of the tagger for this tag, and\n  of the tagging time\n\n @param message Full message for this tag\n\n @return 0 on success; error code otherwise.\n\tA tag object is written to the ODB, and a proper reference\n\tis written in the /refs/tags folder, pointing to it\n\n","file":"tag.h","sig":"git_oid *::git_repository *::const char *::const git_oid *::git_otype::const git_signature *::const char *","args":[{"type":"git_oid *","comment":"Pointer where to store the OID of the  newly created tag","name":"oid"},{"type":"git_repository *","comment":"Repository where to store the tag","name":"repo"},{"type":"const char *","comment":"Name for the tag; this name is validated  for consistency.","name":"tag_name"},{"type":"const git_oid *","comment":"OID to which this tag points; note that no  validation is done on this OID. Use the _fo version of this  method to assure a proper object is being tagged","name":"target"},{"type":"git_otype","comment":"Type of the tagged OID; note that no  validation is performed here either","name":"target_type"},{"type":"const git_signature *","comment":"Signature of the tagger for this tag, and   of the tagging time","name":"tagger"},{"type":"const char *","comment":"Full message for this tag","name":"message"}],"return":{"type":"int","comment":"0 on success; error code otherwise.  A tag object is written to the ODB, and a proper reference  is written in the /refs/tags folder, pointing to it"},"comments":"","argline":"git_oid *oid, git_repository *repo, const char *tag_name, const git_oid *target, git_otype target_type, const git_signature *tagger, const char *message","description":"Create a new tag in the repository from an OID and overwrite an already existing tag reference, if any."},"git_oid_mkraw":{"lineto":67,"line":62,"group":"oid","rawComments":"\n Copy an already raw oid into a git_oid structure.\n @param out oid structure the result is written into.\n @param raw the raw input bytes to be copied.\n\n","file":"oid.h","sig":"git_oid *::const unsigned char *","args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const unsigned char *","comment":"the raw input bytes to be copied.","name":"raw"}],"return":{"type":"void","comment":""},"comments":"","argline":"git_oid *out, const unsigned char *raw","description":"Copy an already raw oid into a git_oid structure."},"git_reference_rename":{"lineto":232,"line":221,"group":"reference","rawComments":"\n Rename an existing reference\n\n This method works for both direct and symbolic references.\n The new name will be checked for validity and may be\n modified into a normalized form.\n\n The refernece will be immediately renamed in-memory\n and on disk.\n\n\n","file":"refs.h","sig":"git_reference *::const char *","args":[{"type":"git_reference *","comment":"","name":"ref"},{"type":"const char *","comment":"","name":"new_name"}],"return":{"type":"int","comment":""},"comments":"This method works for both direct and symbolic references.\n The new name will be checked for validity and may be\n modified into a normalized form.\n\n The refernece will be immediately renamed in-memory\n and on disk.","argline":"git_reference *ref, const char *new_name","description":"Rename an existing reference"},"git_revwalk_reset":{"lineto":103,"line":90,"group":"revwalk","rawComments":"\n Reset the revision walker for reuse.\n\n This will clear all the pushed and hidden commits, and\n leave the walker in a blank state (just like at\n creation) ready to receive new commit pushes and\n start a new walk.\n\n The revision walk is automatically reset when a walk\n is over.\n\n @param walker handle to reset.\n\n","file":"revwalk.h","sig":"git_revwalk *","args":[{"type":"git_revwalk *","comment":"handle to reset.","name":"walker"}],"return":{"type":"void","comment":""},"comments":"This will clear all the pushed and hidden commits, and\n leave the walker in a blank state (just like at\n creation) ready to receive new commit pushes and\n start a new walk.\n\n The revision walk is automatically reset when a walk\n is over.","argline":"git_revwalk *walker","description":"Reset the revision walker for reuse."},"git_object_close":{"lineto":100,"line":85,"group":"object","rawComments":"\n Close an open object\n\n This method instructs the library to close an existing\n object; note that git_objects are owned and cached by the repository\n so the object may or may not be freed after this library call,\n depending on how agressive is the caching mechanism used\n by the repository.\n\n IMPORTANT:\n It *is* necessary to call this method when you stop using\n an object. Failure to do so will cause a memory leak.\n\n @param object the object to close\n\n","file":"object.h","sig":"git_object *","args":[{"type":"git_object *","comment":"the object to close","name":"object"}],"return":{"type":"void","comment":""},"comments":"This method instructs the library to close an existing\n object; note that git_objects are owned and cached by the repository\n so the object may or may not be freed after this library call,\n depending on how agressive is the caching mechanism used\n by the repository.\n\n IMPORTANT:\n It *is* necessary to call this method when you stop using\n an object. Failure to do so will cause a memory leak.","argline":"git_object *object","description":"Close an open object"}},"groups":[["blob",["git_blob_close","git_blob_create_frombuffer","git_blob_create_fromfile","git_blob_lookup","git_blob_rawcontent","git_blob_rawsize"]],["commit",["git_commit_author","git_commit_close","git_commit_committer","git_commit_create","git_commit_create_o","git_commit_create_ov","git_commit_create_v","git_commit_id","git_commit_lookup","git_commit_message","git_commit_message_short","git_commit_parent","git_commit_parent_oid","git_commit_parentcount","git_commit_time","git_commit_time_offset","git_commit_tree","git_commit_tree_oid"]],["errors",["git_lasterror","git_strerror"]],["index",["git_index_add","git_index_append","git_index_clear","git_index_entrycount","git_index_find","git_index_free","git_index_get","git_index_open_bare","git_index_open_inrepo","git_index_read","git_index_remove","git_index_write"]],["object",["git_object__size","git_object_close","git_object_id","git_object_lookup","git_object_owner","git_object_type","git_object_typeisloose"]],["odb",["git_odb_add_alternate","git_odb_add_backend","git_odb_backend_loose","git_odb_backend_pack","git_odb_backend_sqlite","git_odb_close","git_odb_exists","git_odb_hash","git_odb_new","git_odb_object_close","git_odb_object_data","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_open","git_odb_open_rstream","git_odb_open_wstream","git_odb_read","git_odb_read_header","git_odb_write"]],["oid",["git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_mkraw","git_oid_mkstr","git_oid_pathfmt","git_oid_shorten_add","git_oid_shorten_free","git_oid_to_string"]],["reference",["git_reference_create_oid","git_reference_create_oid_f","git_reference_create_symbolic","git_reference_create_symbolic_f","git_reference_delete","git_reference_listall","git_reference_listcb","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_packall","git_reference_rename","git_reference_rename_f","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type"]],["repository",["git_repository_database","git_repository_free","git_repository_index","git_repository_init","git_repository_is_empty","git_repository_open","git_repository_path","git_repository_workdir"]],["revwalk",["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]],["signature",["git_signature_dup","git_signature_free","git_signature_new","git_signature_now"]],["strarray",["git_strarray_free"]],["tag",["git_tag_close","git_tag_create","git_tag_create_f","git_tag_create_fo","git_tag_create_frombuffer","git_tag_create_o","git_tag_delete","git_tag_id","git_tag_list","git_tag_lookup","git_tag_message","git_tag_name","git_tag_tagger","git_tag_target","git_tag_target_oid","git_tag_type"]],["tree",["git_tree_close","git_tree_create_fromindex","git_tree_entry_attributes","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_id","git_tree_entry_name","git_tree_entrycount","git_tree_id","git_tree_lookup"]],["treebuilder",["git_treebuilder_clear","git_treebuilder_create","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write"]]],"prefix":"include/git2","globals":{"GIT_IDXENTRY_SKIP_WORKTREE":{"line":71,"value":"(1 << 14)","file":"index.h"},"GIT_IDXENTRY_VALID":{"line":44,"value":"(0x8000)","file":"index.h"},"GIT_EEXISTS":{"line":114,"value":"(GIT_ERROR - 23)","file":"errors.h"},"GIT_EOSERR":{"line":57,"value":"(GIT_ERROR - 4)","file":"errors.h"},"GIT_ENOTFOUND":{"line":51,"value":"(GIT_ERROR - 2)","file":"errors.h"},"GIT_SORT_TIME":{"line":61,"value":"(1 << 1)","file":"revwalk.h"},"GIT_SORT_NONE":{"line":47,"value":"(0)","file":"revwalk.h"},"GIT_IDXENTRY_NEW_SKIP_WORKTREE":{"line":65,"value":"(1 << 9)","file":"index.h"},"GIT_IDXENTRY_HASHED":{"line":59,"value":"(1 << 4)","file":"index.h"},"GIT_IDXENTRY_STAGESHIFT":{"line":45,"value":"12","file":"index.h"},"GIT_EFLOCKFAIL":{"line":78,"value":"(GIT_ERROR - 11)","file":"errors.h"},"GIT_IDXENTRY_WT_REMOVE":{"line":61,"value":"(1 << 6) /* remove in work directory */","file":"index.h"},"GIT_ESTREAM":{"line":123,"value":"(GIT_ERROR - 26)","file":"errors.h"},"GIT_ENOTNUM":{"line":120,"value":"(GIT_ERROR - 25)","file":"errors.h"},"GIT_ENOTAREPO":{"line":66,"value":"(GIT_ERROR - 7)","file":"errors.h"},"GIT_SUCCESS":{"line":37,"value":"0","file":"errors.h"},"GIT_IDXENTRY_UNHASHED":{"line":60,"value":"(1 << 5)","file":"index.h"},"GIT_IDXENTRY_REMOVE":{"line":55,"value":"(1 << 1)","file":"index.h"},"GIT_OID_RAWSZ":{"line":41,"value":"20","file":"oid.h"},"GIT_IDXENTRY_STAGEMASK":{"line":42,"value":"(0x3000)","file":"index.h"},"GIT_SORT_REVERSE":{"line":68,"value":"(1 << 2)","file":"revwalk.h"},"GIT_IDXENTRY_INTENT_TO_ADD":{"line":70,"value":"(1 << 13)","file":"index.h"},"GIT_IDXENTRY_CONFLICTED":{"line":62,"value":"(1 << 7)","file":"index.h"},"GIT_IDXENTRY_ADDED":{"line":57,"value":"(1 << 3)","file":"index.h"},"GIT_IDXENTRY_UPTODATE":{"line":56,"value":"(1 << 2)","file":"index.h"},"GIT_EZLIB":{"line":81,"value":"(GIT_ERROR - 12)","file":"errors.h"},"GIT_EPACKCORRUPTED":{"line":75,"value":"(GIT_ERROR - 10)","file":"errors.h"},"GIT_EINVALIDTYPE":{"line":69,"value":"(GIT_ERROR - 8)","file":"errors.h"},"GIT_EOBJTYPE":{"line":60,"value":"(GIT_ERROR - 5)","file":"errors.h"},"GIT_OID_HEXSZ":{"line":44,"value":"(GIT_OID_RAWSZ * 2)","file":"oid.h"},"GIT_IDXENTRY_EXTENDED2":{"line":73,"value":"(1 << 15)","file":"index.h"},"GIT_IDXENTRY_EXTENDED":{"line":43,"value":"(0x4000)","file":"index.h"},"GIT_EOVERFLOW":{"line":117,"value":"(GIT_ERROR - 24)","file":"errors.h"},"GIT_EINVALIDPATH":{"line":102,"value":"(GIT_ERROR - 19)","file":"errors.h"},"GIT_EPACKEDREFSCORRUPTED":{"line":99,"value":"(GIT_ERROR - 18)","file":"errors.h"},"GIT_EBUSY":{"line":84,"value":"(GIT_ERROR - 13)","file":"errors.h"},"GIT_EOBJCORRUPTED":{"line":63,"value":"(GIT_ERROR - 6)","file":"errors.h"},"GIT_ENOTOID":{"line":48,"value":"(GIT_ERROR - 1)","file":"errors.h"},"GIT_SORT_TOPOLOGICAL":{"line":54,"value":"(1 << 0)","file":"revwalk.h"},"GIT_IDXENTRY_UNPACKED":{"line":64,"value":"(1 << 8)","file":"index.h"},"GIT_EREFCORRUPTED":{"line":93,"value":"(GIT_ERROR - 16)","file":"errors.h"},"GIT_ENOMEM":{"line":54,"value":"(GIT_ERROR - 3)","file":"errors.h"},"GIT_HAS_TLS":{"line":34,"value":"1","file":"thread-utils.h"},"GIT_IDXENTRY_NAMEMASK":{"line":41,"value":"(0x0fff)","file":"index.h"},"GIT_ENOTIMPLEMENTED":{"line":111,"value":"(GIT_ERROR - 22)","file":"errors.h"},"GIT_EINVALIDREFSTATE":{"line":108,"value":"(GIT_ERROR - 21)","file":"errors.h"},"GIT_ETOONESTEDSYMREF":{"line":96,"value":"(GIT_ERROR - 17)","file":"errors.h"},"GIT_EINVALIDREFNAME":{"line":90,"value":"(GIT_ERROR - 15)","file":"errors.h"},"GIT_ERROR":{"line":45,"value":"-1","file":"errors.h"},"GIT_IDXENTRY_EXTENDED_FLAGS":{"line":75,"value":"(GIT_IDXENTRY_INTENT_TO_ADD | GIT_IDXENTRY_SKIP_WORKTREE)","file":"index.h"},"GIT_IDXENTRY_UPDATE":{"line":54,"value":"(1 << 0)","file":"index.h"},"GIT_EINVALIDARGS":{"line":126,"value":"(GIT_ERROR - 27)","file":"errors.h"},"GIT_EREVWALKOVER":{"line":105,"value":"(GIT_ERROR - 20)","file":"errors.h"},"GIT_EBAREINDEX":{"line":87,"value":"(GIT_ERROR - 14)","file":"errors.h"},"GIT_EMISSINGOBJDATA":{"line":72,"value":"(GIT_ERROR - 9)","file":"errors.h"}}}