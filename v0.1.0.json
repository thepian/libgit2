{"globals":{"GIT_EOSERR":{"line":79,"value":"(GIT_ERROR - 4)","file":"common.h"},"GIT_ENOTFOUND":{"line":73,"value":"(GIT_ERROR - 2)","file":"common.h"},"GIT_SORT_TIME":{"line":37,"value":"(1 << 1)","file":"revwalk.h"},"GIT_SORT_NONE":{"line":23,"value":"(0)","file":"revwalk.h"},"GIT_EFLOCKFAIL":{"line":100,"value":"(GIT_ERROR - 11)","file":"common.h"},"GIT_ENOTAREPO":{"line":88,"value":"(GIT_ERROR - 7)","file":"common.h"},"GIT_SUCCESS":{"line":59,"value":"0","file":"common.h"},"GIT_OID_RAWSZ":{"line":17,"value":"20","file":"oid.h"},"GIT_SORT_REVERSE":{"line":44,"value":"(1 << 2)","file":"revwalk.h"},"GIT_EZLIB":{"line":103,"value":"(GIT_ERROR - 12)","file":"common.h"},"GIT_EPACKCORRUPTED":{"line":97,"value":"(GIT_ERROR - 10)","file":"common.h"},"GIT_EINVALIDTYPE":{"line":91,"value":"(GIT_ERROR - 8)","file":"common.h"},"GIT_EOBJTYPE":{"line":82,"value":"(GIT_ERROR - 5)","file":"common.h"},"GIT_OID_HEXSZ":{"line":20,"value":"(GIT_OID_RAWSZ * 2)","file":"oid.h"},"GIT_EBUSY":{"line":106,"value":"(GIT_ERROR - 13)","file":"common.h"},"GIT_EOBJCORRUPTED":{"line":85,"value":"(GIT_ERROR - 6)","file":"common.h"},"GIT_ENOTOID":{"line":70,"value":"(GIT_ERROR - 1)","file":"common.h"},"GIT_SORT_TOPOLOGICAL":{"line":30,"value":"(1 << 0)","file":"revwalk.h"},"GIT_HAS_PTHREAD":{"line":11,"value":"1","file":"thread-utils.h"},"GIT_ENOMEM":{"line":76,"value":"(GIT_ERROR - 3)","file":"common.h"},"GIT_HAS_TLS":{"line":10,"value":"1","file":"thread-utils.h"},"GIT_ERROR":{"line":67,"value":"-1","file":"common.h"},"GIT_EBAREINDEX":{"line":109,"value":"(GIT_ERROR -14)","file":"common.h"},"GIT_EMISSINGOBJDATA":{"line":94,"value":"(GIT_ERROR - 9)","file":"common.h"}},"types":[["git_blob",{"type":"struct","tdef":"typedef","line":17,"value":"git_blob","used":{"returns":[],"needs":["git_blob_lookup","git_blob_new","git_blob_rawcontent","git_blob_rawsize","git_blob_set_rawcontent","git_blob_set_rawcontent_fromfile"]},"file":"blob.h"}],["git_commit",{"type":"struct","tdef":"typedef","line":19,"value":"git_commit","used":{"returns":["git_revwalk_next"],"needs":["git_commit_add_parent","git_commit_author","git_commit_committer","git_commit_id","git_commit_lookup","git_commit_message","git_commit_message_short","git_commit_new","git_commit_set_author","git_commit_set_committer","git_commit_set_message","git_commit_set_tree","git_commit_time","git_commit_tree","git_revwalk_hide","git_revwalk_push"]},"file":"commit.h"}],["git_index",{"type":"struct","tdef":"typedef","line":18,"value":"git_index","used":{"returns":["git_repository_index"],"needs":["git_index_add","git_index_clear","git_index_entrycount","git_index_find","git_index_free","git_index_get","git_index_insert","git_index_open_bare","git_index_open_inrepo","git_index_read","git_index_remove","git_index_write"]},"file":"index.h"}],["git_index_entry",{"type":"struct","tdef":"typedef","line":28,"value":null,"used":{"returns":["git_index_get"],"needs":["git_index_insert"]},"lineto":45,"file":"index.h","block":"git_index_time ctime;\ngit_index_time mtime;\n\nuint32_t dev;\nuint32_t ino;\nuint32_t mode;\nuint32_t uid;\nuint32_t gid;\nuint32_t file_size;\n\ngit_oid oid;\n\nuint16_t flags;\nuint16_t flags_extended;\n\nchar *path;\n"}],["git_index_time",{"type":"struct","tdef":"typedef","line":22,"value":null,"used":{"returns":[],"needs":[]},"lineto":25,"file":"index.h","block":"uint32_t seconds;\nuint32_t nanoseconds;\n"}],["git_object",{"type":"struct","tdef":"typedef","line":121,"value":"git_object","used":{"returns":["git_tag_target"],"needs":["git_object_free","git_object_id","git_object_owner","git_object_type","git_object_write","git_repository_lookup","git_repository_newobject","git_tag_set_target"]},"file":"common.h"}],["git_odb",{"type":"struct","tdef":"typedef","line":18,"value":"git_odb","used":{"returns":["git_repository_database"],"needs":["git_odb__read_loose","git_odb__read_packed","git_odb_close","git_odb_exists","git_odb_open","git_odb_read","git_odb_read_header","git_odb_write"]},"file":"odb.h"}],["git_oid",{"type":"struct","tdef":"typedef","line":23,"value":null,"used":{"returns":["git_commit_id","git_object_id","git_tag_id","git_tree_entry_id","git_tree_id"],"needs":["git_blob_lookup","git_blob_writefile","git_commit_lookup","git_obj_hash","git_odb__read_loose","git_odb__read_packed","git_odb_exists","git_odb_read","git_odb_read_header","git_odb_write","git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_mkraw","git_oid_mkstr","git_oid_pathfmt","git_oid_to_string","git_repository_lookup","git_tag_lookup","git_tree_add_entry","git_tree_entry_set_id","git_tree_lookup"]},"lineto":26,"file":"oid.h","block":"/** raw binary formatted id */\nunsigned char id[GIT_OID_RAWSZ];\n"}],["git_otype",{"type":"enum","tdef":"typedef","line":37,"value":null,"used":{"returns":[],"needs":["git_obj__loose_object_type","git_obj_type_to_string","git_repository_lookup","git_repository_newobject"]},"lineto":48,"file":"odb.h","block":"GIT_OBJ_ANY = -2,\t\t/**< Object can be any of the following */\nGIT_OBJ_BAD = -1,       /**< Object is invalid. */\nGIT_OBJ__EXT1 = 0,      /**< Reserved for future use. */\nGIT_OBJ_COMMIT = 1,     /**< A commit object. */\nGIT_OBJ_TREE = 2,       /**< A tree (directory listing) object. */\nGIT_OBJ_BLOB = 3,       /**< A file revision object. */\nGIT_OBJ_TAG = 4,        /**< An annotated tag object. */\nGIT_OBJ__EXT2 = 5,      /**< Reserved for future use. */\nGIT_OBJ_OFS_DELTA = 6,  /**< A delta, base is given by an offset. */\nGIT_OBJ_REF_DELTA = 7,  /**< A delta, base is given by object id. */\n"}],["git_person",{"type":"struct","tdef":"typedef","line":125,"value":"git_person","used":{"returns":["git_commit_author","git_commit_committer","git_person_time","git_tag_tagger"],"needs":["git_person_time"]},"file":"common.h"}],["git_rawobj",{"type":"struct","tdef":"typedef","line":51,"value":null,"used":{"returns":[],"needs":["git_obj_close","git_obj_hash","git_odb__read_loose","git_odb__read_packed","git_odb_read","git_odb_read_header","git_odb_write"]},"lineto":55,"file":"odb.h","block":"void *data;          /**< Raw, decompressed object data. */\nsize_t len;          /**< Total number of bytes in data. */\ngit_otype type;      /**< Type of this object. */\n"}],["git_repository",{"type":"struct","tdef":"typedef","line":118,"value":"git_repository","used":{"returns":["git_object_owner","git_revwalk_repository"],"needs":["git_blob_lookup","git_blob_new","git_blob_writefile","git_commit_lookup","git_commit_new","git_index_open_inrepo","git_repository_database","git_repository_free","git_repository_index","git_repository_lookup","git_repository_newobject","git_repository_open","git_revwalk_new","git_tag_lookup","git_tag_new","git_tree_lookup","git_tree_new"]},"file":"common.h"}],["git_revwalk",{"type":"struct","tdef":"typedef","line":46,"value":"git_revwalk","used":{"returns":[],"needs":["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]},"file":"revwalk.h"}],["git_tag",{"type":"struct","tdef":"typedef","line":19,"value":"git_tag","used":{"returns":[],"needs":["git_tag_id","git_tag_lookup","git_tag_message","git_tag_name","git_tag_new","git_tag_set_message","git_tag_set_name","git_tag_set_tagger","git_tag_set_target","git_tag_tagger","git_tag_target","git_tag_type"]},"file":"tag.h"}],["git_tree",{"type":"struct","tdef":"typedef","line":22,"value":"git_tree","used":{"returns":["git_commit_tree"],"needs":["git_commit_set_tree","git_tree_add_entry","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_new","git_tree_remove_entry_byindex","git_tree_remove_entry_byname"]},"file":"tree.h"}],["git_tree_entry",{"type":"struct","tdef":"typedef","line":19,"value":"git_tree_entry","used":{"returns":["git_tree_entry_byindex","git_tree_entry_byname"],"needs":["git_tree_entry_attributes","git_tree_entry_id","git_tree_entry_name","git_tree_entry_set_attributes","git_tree_entry_set_id","git_tree_entry_set_name"]},"file":"tree.h"}]],"files":[{"meta":{"ingroup":"Git","file":"git/blob.h","brief":"Git blob load and write routines","defgroup":"git_blob Git blob load and write routines"},"lines":99,"file":"blob.h","functions":["git_blob_lookup","git_blob_new","git_blob_set_rawcontent_fromfile","git_blob_set_rawcontent","git_blob_rawcontent","git_blob_rawsize","git_blob_writefile"]},{"meta":{"ingroup":"Git","file":"git/commit.h","brief":"Git commit parsing, formatting routines","defgroup":"git_commit Git commit parsing, formatting routines"},"lines":137,"file":"commit.h","functions":["git_commit_lookup","git_commit_new","git_commit_id","git_commit_message_short","git_commit_message","git_commit_time","git_commit_committer","git_commit_author","git_commit_tree","git_commit_add_parent","git_commit_set_message","git_commit_set_committer","git_commit_set_author","git_commit_set_tree"]},{"meta":{"ingroup":"Git","file":"git/common.h","brief":"Git common platform definitions","defgroup":"git_common Git common platform definitions"},"lines":133,"file":"common.h","functions":["__attribute__","__attribute__","git_person_time"]},{"meta":{"ingroup":"Git","file":"git/errors.h","brief":"Git error handling routines and variables","defgroup":null},"lines":33,"file":"errors.h","functions":["git__errno_storage","git_strerror"]},{"meta":{"ingroup":"Git","file":"git/index.h","brief":"Git index parsing and manipulation routines","defgroup":"git_index Git index parsing and manipulation routines"},"lines":172,"file":"index.h","functions":["git_index_open_bare","git_index_open_inrepo","git_index_clear","git_index_free","git_index_read","git_index_write","git_index_find","git_index_add","git_index_remove","git_index_insert","git_index_get","git_index_entrycount"]},{"meta":{"ingroup":"Git","file":"git/odb.h","brief":"Git object database routines","defgroup":"git_odb Git object database routines"},"lines":200,"file":"odb.h","functions":["git_odb_open","git_odb_close","git_odb_read","git_odb_read_header","git_odb__read_packed","git_odb__read_loose","git_odb_write","git_obj_close","git_obj_type_to_string","git_obj_string_to_type","git_obj__loose_object_type","git_obj_hash","git_odb_exists"]},{"meta":{"ingroup":"Git","file":"git/oid.h","brief":"Git object id routines","defgroup":"git_oid Git object id routines"},"lines":122,"file":"oid.h","functions":["git_oid_mkstr","git_oid_mkraw","git_oid_fmt","git_oid_pathfmt","git_oid_allocfmt","git_oid_to_string","git_oid_cpy","git_oid_cmp"]},{"meta":{"ingroup":"Git","file":"git/repository.h","brief":"Git revision object management routines","defgroup":"git_repository Git revision object management routines"},"lines":171,"file":"repository.h","functions":["git_repository_open","git_repository_lookup","git_repository_database","git_repository_index","git_repository_newobject","git_object_write","git_object_id","git_object_type","git_object_owner","git_object_free","git_repository_free"]},{"meta":{"ingroup":"Git","file":"git/revwalk.h","brief":"Git revision traversal routines","defgroup":"git_revwalk Git revision traversal routines"},"lines":112,"file":"revwalk.h","functions":["git_revwalk_new","git_revwalk_reset","git_revwalk_push","git_revwalk_hide","git_revwalk_next","git_revwalk_sorting","git_revwalk_free","git_revwalk_repository"]},{"meta":{"ingroup":"Git","file":"git/tag.h","brief":"Git tag parsing routines","defgroup":"git_tag Git tag management"},"lines":120,"file":"tag.h","functions":["git_tag_lookup","git_tag_new","git_tag_id","git_tag_target","git_tag_type","git_tag_name","git_tag_tagger","git_tag_message","git_tag_set_target","git_tag_set_name","git_tag_set_tagger","git_tag_set_message"]},{"meta":{"ingroup":null,"file":null,"brief":null,"defgroup":null},"lines":56,"file":"thread-utils.h","functions":[]},{"meta":{"ingroup":"Git","file":"git/tree.h","brief":"Git tree parsing, loading routines","defgroup":"git_tree Git tree parsing, loading routines"},"lines":185,"file":"tree.h","functions":["git_tree_lookup","git_tree_new","git_tree_id","git_tree_entrycount","git_tree_entry_byname","git_tree_entry_byindex","git_tree_entry_attributes","git_tree_entry_name","git_tree_entry_id","git_tree_add_entry","git_tree_remove_entry_byindex","git_tree_remove_entry_byname","git_tree_entry_set_id","git_tree_entry_set_name","git_tree_entry_set_attributes"]},{"meta":{"ingroup":"Git","file":"git/zlib.h","brief":"Git data compression routines","defgroup":"git_zlib Git data compression routines"},"lines":35,"file":"zlib.h","functions":[]}],"groups":[["blob",["git_blob_lookup","git_blob_new","git_blob_rawcontent","git_blob_rawsize","git_blob_set_rawcontent","git_blob_set_rawcontent_fromfile","git_blob_writefile"]],["commit",["git_commit_add_parent","git_commit_author","git_commit_committer","git_commit_id","git_commit_lookup","git_commit_message","git_commit_message_short","git_commit_new","git_commit_set_author","git_commit_set_committer","git_commit_set_message","git_commit_set_tree","git_commit_time","git_commit_tree"]],["errors",["git_strerror"]],["index",["git_index_add","git_index_clear","git_index_entrycount","git_index_find","git_index_free","git_index_get","git_index_insert","git_index_open_bare","git_index_open_inrepo","git_index_read","git_index_remove","git_index_write"]],["obj",["git_obj__loose_object_type","git_obj_close","git_obj_hash","git_obj_string_to_type","git_obj_type_to_string"]],["object",["git_object_free","git_object_id","git_object_owner","git_object_type","git_object_write"]],["odb",["git_odb__read_loose","git_odb__read_packed","git_odb_close","git_odb_exists","git_odb_open","git_odb_read","git_odb_read_header","git_odb_write"]],["oid",["git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_mkraw","git_oid_mkstr","git_oid_pathfmt","git_oid_to_string"]],["person",["git_person_time"]],["repository",["git_repository_database","git_repository_free","git_repository_index","git_repository_lookup","git_repository_newobject","git_repository_open"]],["revwalk",["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]],["tag",["git_tag_id","git_tag_lookup","git_tag_message","git_tag_name","git_tag_new","git_tag_set_message","git_tag_set_name","git_tag_set_tagger","git_tag_set_target","git_tag_tagger","git_tag_target","git_tag_type"]],["tree",["git_tree_add_entry","git_tree_entry_attributes","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_id","git_tree_entry_name","git_tree_entry_set_attributes","git_tree_entry_set_id","git_tree_entry_set_name","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_new","git_tree_remove_entry_byindex","git_tree_remove_entry_byname"]]],"prefix":"src/git","functions":{"git_index_add":{"argline":"git_index *index, const char *path, int stage","line":117,"group":"index","lineto":125,"file":"index.h","rawComments":"\n Add or update an index entry from a file in disk.\n\n @param index an existing index object\n @param path filename to add\n @param stage stage for the entry\n @return 0 on success, otherwise an error code\n\n","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const char *","comment":"filename to add","name":"path"},{"type":"int","comment":"stage for the entry","name":"stage"}],"sig":"git_index *::const char *::int","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"Add or update an index entry from a file in disk.","comments":""},"git_blob_rawcontent":{"argline":"git_blob *blob","line":65,"group":"blob","lineto":76,"file":"blob.h","rawComments":"\n Get a read-only buffer with the raw content of a blob.\n\n A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time (e.g. when changing the contents of the blob).\n\n @param blob pointer to the blob\n @return the pointer; NULL if the blob has no contents\n\n","args":[{"type":"git_blob *","comment":"pointer to the blob","name":"blob"}],"sig":"git_blob *","return":{"type":"const char *","comment":"the pointer; NULL if the blob has no contents"},"description":"Get a read-only buffer with the raw content of a blob.","comments":"A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time (e.g. when changing the contents of the blob)."},"git__errno_storage":{"argline":"void","line":14,"lineto":20,"file":"errors.h","rawComments":" The git errno. ","args":[{"type":"","comment":"","name":"void"}],"sig":"","return":{"type":"int) git_errno; GIT_EXTERN(int *","comment":""},"description":"The git errno.","comments":""},"git_blob_set_rawcontent_fromfile":{"argline":"git_blob *blob, const char *filename","line":44,"group":"blob","lineto":52,"file":"blob.h","rawComments":"\n Fill a blob with the contents inside\n the pointed file.\n\n @param blob pointer to the new blob\n @param filename name of the file to read\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_blob *","comment":"pointer to the new blob","name":"blob"},{"type":"const char *","comment":"name of the file to read","name":"filename"}],"sig":"git_blob *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Fill a blob with the contents inside the pointed file.","comments":""},"git_oid_to_string":{"argline":"char *out, size_t n, const git_oid *oid","line":82,"group":"oid","lineto":97,"file":"oid.h","rawComments":"\n Format a git_oid into a buffer as a hex format c-string.\n <p>\n If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\n oid c-string will be truncated to n-1 characters. If there are\n any input parameter errors (out == NULL, n == 0, oid == NULL),\n then a pointer to an empty string is returned, so that the return\n value can always be printed.\n\n @param out the buffer into which the oid string is output.\n @param n the size of the out buffer.\n @param oid the oid structure to format.\n @return the out buffer pointer, assuming no input parameter\n         errors, otherwise a pointer to an empty string.\n\n","args":[{"type":"char *","comment":"the buffer into which the oid string is output.","name":"out"},{"type":"size_t","comment":"the size of the out buffer.","name":"n"},{"type":"const git_oid *","comment":"the oid structure to format.","name":"oid"}],"sig":"char *::size_t::const git_oid *","return":{"type":"char *","comment":"the out buffer pointer, assuming no input parameter          errors, otherwise a pointer to an empty string."},"description":"Format a git_oid into a buffer as a hex format c-string. <p> If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting oid c-string will be truncated to n-1 characters. If there are any input parameter errors (out == NULL, n == 0, oid == NULL), then a pointer to an empty string is returned, so that the return value can always be printed.","comments":""},"git_commit_message_short":{"argline":"git_commit *commit","line":54,"group":"commit","lineto":59,"file":"commit.h","rawComments":"\n Get the short (one line) message of a commit.\n @param commit a previously loaded commit.\n @return the short message of a commit\n\n","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"sig":"git_commit *","return":{"type":"const char *","comment":"the short message of a commit"},"description":"Get the short (one line) message of a commit.","comments":""},"git_commit_message":{"argline":"git_commit *commit","line":61,"group":"commit","lineto":66,"file":"commit.h","rawComments":"\n Get the full message of a commit.\n @param commit a previously loaded commit.\n @return the message of a commit\n\n","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"sig":"git_commit *","return":{"type":"const char *","comment":"the message of a commit"},"description":"Get the full message of a commit.","comments":""},"git_oid_fmt":{"argline":"char *str, const git_oid *oid","line":48,"group":"oid","lineto":57,"file":"oid.h","rawComments":"\n Format a git_oid into a hex string.\n @param str output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes).  Only the\n        oid digits are written; a '\\\\0' terminator must be added\n        by the caller if it is required.\n @param oid oid structure to format.\n\n","args":[{"type":"char *","comment":"output hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (40 bytes).  Only the         oid digits are written; a '\\\\0' terminator must be added         by the caller if it is required.","name":"str"},{"type":"const git_oid *","comment":"oid structure to format.","name":"oid"}],"sig":"char *::const git_oid *","return":{"type":"void","comment":""},"description":"Format a git_oid into a hex string.","comments":""},"git_revwalk_repository":{"argline":"git_revwalk *walk","line":101,"group":"revwalk","lineto":108,"file":"revwalk.h","rawComments":"\n Return the repository on which this walker\n is operating.\n\n @param walk the revision walker\n @return the repository being walked\n\n","args":[{"type":"git_revwalk *","comment":"the revision walker","name":"walk"}],"sig":"git_revwalk *","return":{"type":"git_repository *","comment":"the repository being walked"},"description":"Return the repository on which this walker is operating.","comments":""},"git_revwalk_free":{"argline":"git_revwalk *walk","line":95,"group":"revwalk","lineto":99,"file":"revwalk.h","rawComments":"\n Free a revwalk previously allocated.\n @param walk traversal handle to close.  If NULL nothing occurs.\n\n","args":[{"type":"git_revwalk *","comment":"traversal handle to close.  If NULL nothing occurs.","name":"walk"}],"sig":"git_revwalk *","return":{"type":"void","comment":""},"description":"Free a revwalk previously allocated.","comments":""},"git_odb_open":{"argline":"git_odb **out, const char *objects_dir","line":20,"group":"odb","lineto":28,"file":"odb.h","rawComments":"\n Open an object database for read/write access.\n @param out location to store the database pointer, if opened.\n            Set to NULL if the open failed.\n @param objects_dir path of the database's \"objects\" directory.\n @return GIT_SUCCESS if the database opened; otherwise an error\n         code describing why the open was not possible.\n\n","args":[{"type":"git_odb **","comment":"location to store the database pointer, if opened.             Set to NULL if the open failed.","name":"out"},{"type":"const char *","comment":"path of the database's \"objects\" directory.","name":"objects_dir"}],"sig":"git_odb **::const char *","return":{"type":"int","comment":"GIT_SUCCESS if the database opened; otherwise an error          code describing why the open was not possible."},"description":"Open an object database for read/write access.","comments":""},"git_repository_database":{"argline":"git_repository *repo","line":63,"group":"repository","lineto":69,"file":"repository.h","rawComments":"\n Get the object database behind a Git repository\n\n @param repo a repository object\n @return a pointer to the object db\n\n","args":[{"type":"git_repository *","comment":"a repository object","name":"repo"}],"sig":"git_repository *","return":{"type":"git_odb *","comment":"a pointer to the object db"},"description":"Get the object database behind a Git repository","comments":""},"git_commit_new":{"argline":"git_commit ** commit, git_repository *repo","line":34,"group":"commit","lineto":45,"file":"commit.h","rawComments":"\n Create a new in-memory git_commit.\n\n The commit object must be manually filled using\n setter methods before it can be written to its\n repository.\n\n @param commit pointer to the new commit\n @param repo The repository where the object will reside\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_commit **","comment":"pointer to the new commit","name":"commit"},{"type":"git_repository *","comment":"The repository where the object will reside","name":"repo"}],"sig":"git_commit **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new in-memory git_commit.","comments":"The commit object must be manually filled using\n setter methods before it can be written to its\n repository."},"git_index_read":{"argline":"git_index *index","line":89,"group":"index","lineto":96,"file":"index.h","rawComments":"\n Update the contents of an existing index object in memory\n by reading from the hard disk.\n\n @param index an existing index object\n @return 0 on success, otherwise an error code\n\n","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"sig":"git_index *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"Update the contents of an existing index object in memory by reading from the hard disk.","comments":""},"git_index_open_bare":{"argline":"git_index **index, const char *index_path","line":48,"group":"index","lineto":61,"file":"index.h","rawComments":"\n Create a new Git index object as a memory representation\n of the Git index file in 'index_path', without a repository\n to back it.\n\n Since there is no ODB behind this index, any Index methods\n which rely on the ODB (e.g. index_add) will fail with the\n GIT_EBAREINDEX error code.\n\n @param index the pointer for the new index\n @param index_path the path to the index file in disk\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_index **","comment":"the pointer for the new index","name":"index"},{"type":"const char *","comment":"the path to the index file in disk","name":"index_path"}],"sig":"git_index **::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new Git index object as a memory representation of the Git index file in 'index_path', without a repository to back it.","comments":"Since there is no ODB behind this index, any Index methods\n which rely on the ODB (e.g. index_add) will fail with the\n GIT_EBAREINDEX error code."},"git_tag_set_tagger":{"argline":"git_tag *tag, const char *name, const char *email, time_t time","line":102,"group":"tag","lineto":109,"file":"tag.h","rawComments":"\n Set the tagger of a tag\n @param tag The tag to modify\n @param name the name of the new tagger\n @param email the email of the new tagger\n @param time the time when the tag was created\n\n","args":[{"type":"git_tag *","comment":"The tag to modify","name":"tag"},{"type":"const char *","comment":"the name of the new tagger","name":"name"},{"type":"const char *","comment":"the email of the new tagger","name":"email"},{"type":"time_t","comment":"the time when the tag was created","name":"time"}],"sig":"git_tag *::const char *::const char *::time_t","return":{"type":"void","comment":""},"description":"Set the tagger of a tag","comments":""},"git_commit_set_committer":{"argline":"git_commit *commit, const char *name, const char *email, time_t time","line":110,"group":"commit","lineto":117,"file":"commit.h","rawComments":"\n Set the committer of a commit\n @param commit the commit object\n @param name name of the new committer\n @param email email of the new committer\n @param time time when the committer committed the commit\n\n","args":[{"type":"git_commit *","comment":"the commit object","name":"commit"},{"type":"const char *","comment":"name of the new committer","name":"name"},{"type":"const char *","comment":"email of the new committer","name":"email"},{"type":"time_t","comment":"time when the committer committed the commit","name":"time"}],"sig":"git_commit *::const char *::const char *::time_t","return":{"type":"void","comment":""},"description":"Set the committer of a commit","comments":""},"git_repository_open":{"argline":"git_repository **repository, const char *path","line":18,"group":"repository","lineto":41,"file":"repository.h","rawComments":"\n Open a git repository.\n\n The 'path' argument must point to an existing git repository\n folder, e.g.\n\n\t\t/path/to/my_repo/.git/\t(normal repository)\n\t\t\t\t\t\t\tobjects/\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t\tHEAD\n\n\t\t/path/to/bare_repo/\t\t(bare repository)\n\t\t\t\t\t\tobjects/\n\t\t\t\t\t\tindex\n\t\t\t\t\t\tHEAD\n\n\tThe method will automatically detect if 'path' is a normal\n\tor bare repository or fail is 'path' is neither.\n\n @param repository pointer to the repo which will be opened\n @param path the path to the repository\n @return the new repository handle; NULL on error\n\n","args":[{"type":"git_repository **","comment":"pointer to the repo which will be opened","name":"repository"},{"type":"const char *","comment":"the path to the repository","name":"path"}],"sig":"git_repository **::const char *","return":{"type":"int","comment":"the new repository handle; NULL on error"},"description":"Open a git repository.","comments":"The 'path' argument must point to an existing git repository\n folder, e.g.\n\n\t\t/path/to/my_repo/.git/\t(normal repository)\n\t\t\t\t\t\t\tobjects/\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t\tHEAD\n\n\t\t/path/to/bare_repo/\t\t(bare repository)\n\t\t\t\t\t\tobjects/\n\t\t\t\t\t\tindex\n\t\t\t\t\t\tHEAD\n\n\tThe method will automatically detect if 'path' is a normal\n\tor bare repository or fail is 'path' is neither."},"git_odb_exists":{"argline":"git_odb *db, const git_oid *id","line":187,"group":"odb","lineto":196,"file":"odb.h","rawComments":"\n Determine if the given object can be found in the object database.\n\n @param db database to be searched for the given object.\n @param id the object to search for.\n @return\n - true, if the object was found\n - false, otherwise\n\n","args":[{"type":"git_odb *","comment":"database to be searched for the given object.","name":"db"},{"type":"const git_oid *","comment":"the object to search for.","name":"id"}],"sig":"git_odb *::const git_oid *","return":{"type":"int","comment":""},"description":"Determine if the given object can be found in the object database.","comments":"@return\n - true, if the object was found\n - false, otherwise"},"git_tree_remove_entry_byname":{"argline":"git_tree *tree, const char *filename","line":138,"group":"tree","lineto":148,"file":"tree.h","rawComments":"\n Remove an entry by its filename.\n\n This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write()\n\n @param tree Tree where to remove the entry\n @param filename File name of the entry\n @return 0 on successful removal; GIT_ENOTFOUND if the entry wasn't found\n\n","args":[{"type":"git_tree *","comment":"Tree where to remove the entry","name":"tree"},{"type":"const char *","comment":"File name of the entry","name":"filename"}],"sig":"git_tree *::const char *","return":{"type":"int","comment":"0 on successful removal; GIT_ENOTFOUND if the entry wasn't found"},"description":"Remove an entry by its filename.","comments":"This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write()"},"git_tag_set_message":{"argline":"git_tag *tag, const char *message","line":111,"group":"tag","lineto":116,"file":"tag.h","rawComments":"\n Set the message of a tag\n @param tag The tag to modify\n @param message the new tagger for the tag\n\n","args":[{"type":"git_tag *","comment":"The tag to modify","name":"tag"},{"type":"const char *","comment":"the new tagger for the tag","name":"message"}],"sig":"git_tag *::const char *","return":{"type":"void","comment":""},"description":"Set the message of a tag","comments":""},"git_tag_set_target":{"argline":"git_tag *tag, git_object *target","line":88,"group":"tag","lineto":93,"file":"tag.h","rawComments":"\n Set the target of a tag (i.e. the object that the tag points to)\n @param tag The tag to modify\n @param target the new tagged target\n\n","args":[{"type":"git_tag *","comment":"The tag to modify","name":"tag"},{"type":"git_object *","comment":"the new tagged target","name":"target"}],"sig":"git_tag *::git_object *","return":{"type":"void","comment":""},"description":"Set the target of a tag (i.e. the object that the tag points to)","comments":""},"git_obj_string_to_type":{"argline":"const char *str","line":156,"group":"obj","lineto":162,"file":"odb.h","rawComments":"\n Convert a string object type representation to it's git_otype.\n\n @param str the string to convert.\n @return the corresponding git_otype.\n\n","args":[{"type":"const char *","comment":"the string to convert.","name":"str"}],"sig":"const char *","return":{"type":"git_otype","comment":"the corresponding git_otype."},"description":"Convert a string object type representation to it's git_otype.","comments":""},"git_commit_set_message":{"argline":"git_commit *commit, const char *message","line":103,"group":"commit","lineto":108,"file":"commit.h","rawComments":"\n Set the message of a commit\n @param commit the commit object\n @param message the new message\n\n","args":[{"type":"git_commit *","comment":"the commit object","name":"commit"},{"type":"const char *","comment":"the new message","name":"message"}],"sig":"git_commit *::const char *","return":{"type":"void","comment":""},"description":"Set the message of a commit","comments":""},"git_person_time":{"argline":"git_person *person","line":124,"group":"person","lineto":129,"file":"common.h","rawComments":" Parsed representation of a person ","args":[{"type":"git_person *","comment":"","name":"person"}],"sig":"git_person *","return":{"type":"git_person *person); const char *git_person_email(git_person *person","comment":""},"description":"Parsed representation of a person","comments":""},"git_blob_writefile":{"argline":"git_oid *written_id, git_repository *repo, const char *path","line":86,"group":"blob","lineto":95,"file":"blob.h","rawComments":"\n Read a file from the working folder of a repository\n and write it to the Object Database as a loose blob,\n if such doesn't exist yet.\n\n @param written_id return the id of the written blob\n @param repo repository where the blob will be written\n @param path file from which the blob will be created\n\n","args":[{"type":"git_oid *","comment":"return the id of the written blob","name":"written_id"},{"type":"git_repository *","comment":"repository where the blob will be written","name":"repo"},{"type":"const char *","comment":"file from which the blob will be created","name":"path"}],"sig":"git_oid *::git_repository *::const char *","return":{"type":"int","comment":""},"description":"Read a file from the working folder of a repository and write it to the Object Database as a loose blob, if such doesn't exist yet.","comments":""},"git_index_open_inrepo":{"argline":"git_index **index, git_repository *repo","line":63,"group":"index","lineto":71,"file":"index.h","rawComments":"\n Open the Index inside the git repository pointed\n by 'repo'.\n\n @param repo the git repo which owns the index\n @param index_path the path to the index file in disk\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_index **","comment":"","name":"index"},{"type":"git_repository *","comment":"the git repo which owns the index","name":"repo"}],"sig":"git_index **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Open the Index inside the git repository pointed by 'repo'.","comments":"@param index_path the path to the index file in disk"},"git_obj_close":{"argline":"git_rawobj *obj","line":130,"group":"obj","lineto":143,"file":"odb.h","rawComments":"\n Release all memory used by the obj structure.\n\n As a result of this call, obj->data will be set to NULL.\n\n If obj->data is already NULL, nothing happens.\n\n @param obj object descriptor to free.\n\n","args":[{"type":"git_rawobj *","comment":"object descriptor to free.","name":"obj"}],"sig":"git_rawobj *","return":{"type":"void","comment":""},"description":"Release all memory used by the obj structure.","comments":"As a result of this call, obj->data will be set to NULL.\n\n If obj->data is already NULL, nothing happens."},"git_object_id":{"argline":"git_object *obj","line":122,"group":"object","lineto":131,"file":"repository.h","rawComments":"\n Get the id (SHA1) of a repository object\n\n In-memory objects created by git_object_new() do not\n have a SHA1 ID until they are written on a repository.\n\n @param obj the repository object\n @return the SHA1 id\n\n","args":[{"type":"git_object *","comment":"the repository object","name":"obj"}],"sig":"git_object *","return":{"type":"const git_oid *","comment":"the SHA1 id"},"description":"Get the id (SHA1) of a repository object","comments":"In-memory objects created by git_object_new() do not\n have a SHA1 ID until they are written on a repository."},"git_tree_entry_set_attributes":{"argline":"git_tree_entry *entry, int attr","line":172,"group":"tree","lineto":181,"file":"tree.h","rawComments":"\n Change the attributes of a tree entry.\n\n This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()\n\n @param entry Entry object which will be modified\n @param oid new attributes for the entry\n\n","args":[{"type":"git_tree_entry *","comment":"Entry object which will be modified","name":"entry"},{"type":"int","comment":"","name":"attr"}],"sig":"git_tree_entry *::int","return":{"type":"void","comment":""},"description":"Change the attributes of a tree entry.","comments":"This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()\n\n @param oid new attributes for the entry"},"git_tree_entry_set_id":{"argline":"git_tree_entry *entry, const git_oid *oid","line":150,"group":"tree","lineto":159,"file":"tree.h","rawComments":"\n Change the SHA1 id of a tree entry.\n\n This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()\n\n @param entry Entry object which will be modified\n @param oid new SHA1 oid for the entry\n\n","args":[{"type":"git_tree_entry *","comment":"Entry object which will be modified","name":"entry"},{"type":"const git_oid *","comment":"new SHA1 oid for the entry","name":"oid"}],"sig":"git_tree_entry *::const git_oid *","return":{"type":"void","comment":""},"description":"Change the SHA1 id of a tree entry.","comments":"This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()"},"git_revwalk_next":{"argline":"git_revwalk *walk","line":79,"group":"revwalk","lineto":84,"file":"revwalk.h","rawComments":"\n Get the next commit from the revision traversal.\n @param walk the walker to pop the commit from.\n @return next commit; NULL if there is no more output.\n\n","args":[{"type":"git_revwalk *","comment":"the walker to pop the commit from.","name":"walk"}],"sig":"git_revwalk *","return":{"type":"git_commit *","comment":"next commit; NULL if there is no more output."},"description":"Get the next commit from the revision traversal.","comments":""},"git_object_owner":{"argline":"git_object *obj","line":141,"group":"object","lineto":147,"file":"repository.h","rawComments":"\n Get the repository that owns this object\n\n @param obj the object\n @return the repository who owns this object\n\n","args":[{"type":"git_object *","comment":"the object","name":"obj"}],"sig":"git_object *","return":{"type":"git_repository *","comment":"the repository who owns this object"},"description":"Get the repository that owns this object","comments":""},"git_blob_lookup":{"argline":"git_blob **blob, git_repository *repo, const git_oid *id","line":19,"group":"blob","lineto":29,"file":"blob.h","rawComments":"\n Lookup a blob object from a repository.\n The generated blob object is owned by the revision\n repo and shall not be freed by the user.\n\n @param blob pointer to the looked up blob\n @param repo the repo to use when locating the blob.\n @param id identity of the blob to locate.\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_blob **","comment":"pointer to the looked up blob","name":"blob"},{"type":"git_repository *","comment":"the repo to use when locating the blob.","name":"repo"},{"type":"const git_oid *","comment":"identity of the blob to locate.","name":"id"}],"sig":"git_blob **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Lookup a blob object from a repository. The generated blob object is owned by the revision repo and shall not be freed by the user.","comments":""},"git_tree_entry_byindex":{"argline":"git_tree *tree, int idx","line":72,"group":"tree","lineto":78,"file":"tree.h","rawComments":"\n Lookup a tree entry by its position in the tree\n @param tree a previously loaded tree.\n @param idx the position in the entry list\n @return the tree entry; NULL if not found\n\n","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"},{"type":"int","comment":"the position in the entry list","name":"idx"}],"sig":"git_tree *::int","return":{"type":"git_tree_entry *","comment":"the tree entry; NULL if not found"},"description":"Lookup a tree entry by its position in the tree","comments":""},"git_tag_tagger":{"argline":"git_tag *t","line":74,"group":"tag","lineto":79,"file":"tag.h","rawComments":"\n Get the tagger (author) of a tag\n @param tag a previously loaded tag.\n @return reference to the tag's author\n\n","args":[{"type":"git_tag *","comment":"","name":"t"}],"sig":"git_tag *","return":{"type":"const git_person *","comment":"reference to the tag's author"},"description":"Get the tagger (author) of a tag @param tag a previously loaded tag.","comments":""},"git_object_write":{"argline":"git_object *object","line":103,"group":"object","lineto":120,"file":"repository.h","rawComments":"\n Write back an object to disk.\n\n The object will be written to its corresponding\n repository.\n\n If the object has no changes since it was first\n read from the repository, no actions will take place.\n\n If the object has been modified since it was read from\n the repository, or it has been created from scratch\n in memory, it will be written to the repository and\n its SHA1 ID will be updated accordingly.\n\n @param object Git object to write back\n @return 0 on success; otherwise an error code\n\n","args":[{"type":"git_object *","comment":"Git object to write back","name":"object"}],"sig":"git_object *","return":{"type":"int","comment":"0 on success; otherwise an error code"},"description":"Write back an object to disk.","comments":"The object will be written to its corresponding\n repository.\n\n If the object has no changes since it was first\n read from the repository, no actions will take place.\n\n If the object has been modified since it was read from\n the repository, or it has been created from scratch\n in memory, it will be written to the repository and\n its SHA1 ID will be updated accordingly."},"git_odb__read_packed":{"argline":"git_rawobj *out, git_odb *db, const git_oid *id","line":90,"group":"odb","lineto":102,"file":"odb.h","rawComments":"\n Read an object from the database using only pack files.\n\n If GIT_ENOTFOUND then out->data is set to NULL.\n\n @param out object descriptor to populate upon reading.\n @param db database to search for the object in.\n @param id identity of the object to read.\n @return\n - GIT_SUCCESS if the object was read.\n - GIT_ENOTFOUND if the object is not in the database.\n\n","args":[{"type":"git_rawobj *","comment":"object descriptor to populate upon reading.","name":"out"},{"type":"git_odb *","comment":"database to search for the object in.","name":"db"},{"type":"const git_oid *","comment":"identity of the object to read.","name":"id"}],"sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":""},"description":"Read an object from the database using only pack files.","comments":"If GIT_ENOTFOUND then out->data is set to NULL.\n\n @return\n - GIT_SUCCESS if the object was read.\n - GIT_ENOTFOUND if the object is not in the database."},"git_tree_remove_entry_byindex":{"argline":"git_tree *tree, int idx","line":124,"group":"tree","lineto":136,"file":"tree.h","rawComments":"\n Remove an entry by its index.\n\n Index must be >= 0 and < than git_tree_entrycount().\n\n This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write()\n\n @param tree Tree where to remove the entry\n @param idx index of the entry\n @return 0 on successful removal; GIT_ENOTFOUND if the entry wasn't found\n\n","args":[{"type":"git_tree *","comment":"Tree where to remove the entry","name":"tree"},{"type":"int","comment":"index of the entry","name":"idx"}],"sig":"git_tree *::int","return":{"type":"int","comment":"0 on successful removal; GIT_ENOTFOUND if the entry wasn't found"},"description":"Remove an entry by its index.","comments":"Index must be >= 0 and < than git_tree_entrycount().\n\n This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write()"},"git_tag_target":{"argline":"git_tag *t","line":53,"group":"tag","lineto":58,"file":"tag.h","rawComments":"\n Get the tagged object of a tag\n @param tag a previously loaded tag.\n @return reference to a repository object\n\n","args":[{"type":"git_tag *","comment":"","name":"t"}],"sig":"git_tag *","return":{"type":"const git_object *","comment":"reference to a repository object"},"description":"Get the tagged object of a tag @param tag a previously loaded tag.","comments":""},"git_obj__loose_object_type":{"argline":"git_otype type","line":164,"group":"obj","lineto":171,"file":"odb.h","rawComments":"\n Determine if the given git_otype is a valid loose object type.\n\n @param type object type to test.\n @return true if the type represents a valid loose object type,\n false otherwise.\n\n","args":[{"type":"git_otype","comment":"object type to test.","name":"type"}],"sig":"git_otype","return":{"type":"int","comment":"true if the type represents a valid loose object type,  false otherwise."},"description":"Determine if the given git_otype is a valid loose object type.","comments":""},"git_commit_add_parent":{"argline":"git_commit *commit, git_commit *new_parent","line":96,"group":"commit","lineto":101,"file":"commit.h","rawComments":"\n Add a new parent commit to an existing commit\n @param commit the commit object\n @param new_parent the new commit which will be a parent\n\n","args":[{"type":"git_commit *","comment":"the commit object","name":"commit"},{"type":"git_commit *","comment":"the new commit which will be a parent","name":"new_parent"}],"sig":"git_commit *::git_commit *","return":{"type":"void","comment":""},"description":"Add a new parent commit to an existing commit","comments":""},"git_index_write":{"argline":"git_index *index","line":98,"group":"index","lineto":105,"file":"index.h","rawComments":"\n Write an existing index object from memory back to disk\n using an atomic file lock.\n\n @param index an existing index object\n @return 0 on success, otherwise an error code\n\n","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"sig":"git_index *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"Write an existing index object from memory back to disk using an atomic file lock.","comments":""},"git_tag_set_name":{"argline":"git_tag *tag, const char *name","line":95,"group":"tag","lineto":100,"file":"tag.h","rawComments":"\n Set the name of a tag\n @param tag The tag to modify\n @param name the new name for the tag\n\n","args":[{"type":"git_tag *","comment":"The tag to modify","name":"tag"},{"type":"const char *","comment":"the new name for the tag","name":"name"}],"sig":"git_tag *::const char *","return":{"type":"void","comment":""},"description":"Set the name of a tag","comments":""},"git_tag_id":{"argline":"git_tag *tag","line":46,"group":"tag","lineto":51,"file":"tag.h","rawComments":"\n Get the id of a tag.\n @param tag a previously loaded tag.\n @return object identity for the tag.\n\n","args":[{"type":"git_tag *","comment":"a previously loaded tag.","name":"tag"}],"sig":"git_tag *","return":{"type":"const git_oid *","comment":"object identity for the tag."},"description":"Get the id of a tag.","comments":""},"git_revwalk_sorting":{"argline":"git_revwalk *walk, unsigned int sort_mode","line":86,"group":"revwalk","lineto":93,"file":"revwalk.h","rawComments":"\n Change the sorting mode when iterating through the\n repository's contents.\n Changing the sorting mode resets the walker.\n @param walk the walker being used for the traversal.\n @param sort_mode combination of GIT_RPSORT_XXX flags\n\n","args":[{"type":"git_revwalk *","comment":"the walker being used for the traversal.","name":"walk"},{"type":"unsigned int","comment":"combination of GIT_RPSORT_XXX flags","name":"sort_mode"}],"sig":"git_revwalk *::unsigned int","return":{"type":"int","comment":""},"description":"Change the sorting mode when iterating through the repository's contents. Changing the sorting mode resets the walker.","comments":""},"git_oid_cpy":{"argline":"git_oid *out, const git_oid *src","line":99,"group":"oid","lineto":107,"file":"oid.h","rawComments":"\n Copy an oid from one structure to another.\n @param out oid structure the result is written into.\n @param src oid structure to copy from.\n\n","args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const git_oid *","comment":"oid structure to copy from.","name":"src"}],"sig":"git_oid *::const git_oid *","return":{"type":"void","comment":""},"description":"Copy an oid from one structure to another.","comments":""},"git_strerror":{"argline":"int num","line":24,"group":"errors","lineto":29,"file":"errors.h","rawComments":"\n strerror() for the Git library\n @param num The error code to explain\n @return a string explaining the error code\n\n","args":[{"type":"int","comment":"The error code to explain","name":"num"}],"sig":"int","return":{"type":"const char *","comment":"a string explaining the error code"},"description":"strerror() for the Git library","comments":""},"git_oid_allocfmt":{"argline":"const git_oid *oid","line":74,"group":"oid","lineto":80,"file":"oid.h","rawComments":"\n Format a gid_oid into a newly allocated c-string.\n @param oid the oid structure to format\n @return the c-string; NULL if memory is exhausted.  Caller must\n         deallocate the string with free().\n\n","args":[{"type":"const git_oid *","comment":"the oid structure to format","name":"oid"}],"sig":"const git_oid *","return":{"type":"char *","comment":"the c-string; NULL if memory is exhausted.  Caller must          deallocate the string with free()."},"description":"Format a gid_oid into a newly allocated c-string.","comments":""},"git_index_find":{"argline":"git_index *index, const char *path","line":107,"group":"index","lineto":115,"file":"index.h","rawComments":"\n Find the first index of any entires which point to given\n path in the Git index.\n\n @param index an existing index object\n @param path path to search\n @return an index >= 0 if found, -1 otherwise\n\n","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const char *","comment":"path to search","name":"path"}],"sig":"git_index *::const char *","return":{"type":"int","comment":"an index >= 0 if found, -1 otherwise"},"description":"Find the first index of any entires which point to given path in the Git index.","comments":""},"git_tag_message":{"argline":"git_tag *t","line":81,"group":"tag","lineto":86,"file":"tag.h","rawComments":"\n Get the message of a tag\n @param tag a previously loaded tag.\n @return message of the tag\n\n","args":[{"type":"git_tag *","comment":"","name":"t"}],"sig":"git_tag *","return":{"type":"const char *","comment":"message of the tag"},"description":"Get the message of a tag @param tag a previously loaded tag.","comments":""},"git_object_free":{"argline":"git_object *object","line":149,"group":"object","lineto":161,"file":"repository.h","rawComments":"\n Free a reference to one of the objects in the repository.\n\n Repository objects are managed automatically by the library,\n but this method can be used to force freeing one of the\n objects.\n\n Careful: freeing objects in the middle of a repository\n traversal will most likely cause errors.\n\n @param object the object to free\n\n","args":[{"type":"git_object *","comment":"the object to free","name":"object"}],"sig":"git_object *","return":{"type":"void","comment":""},"description":"Free a reference to one of the objects in the repository.","comments":"Repository objects are managed automatically by the library,\n but this method can be used to force freeing one of the\n objects.\n\n Careful: freeing objects in the middle of a repository\n traversal will most likely cause errors."},"git_commit_lookup":{"argline":"git_commit **commit, git_repository *repo, const git_oid *id","line":21,"group":"commit","lineto":32,"file":"commit.h","rawComments":"\n Lookup a commit object from a repository.\n The generated commit object is owned by the revision\n repo and shall not be freed by the user.\n\n @param commit pointer to the looked up commit\n @param repo the repo to use when locating the commit.\n @param id identity of the commit to locate.  If the object is\n        an annotated tag it will be peeled back to the commit.\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_commit **","comment":"pointer to the looked up commit","name":"commit"},{"type":"git_repository *","comment":"the repo to use when locating the commit.","name":"repo"},{"type":"const git_oid *","comment":"identity of the commit to locate.  If the object is         an annotated tag it will be peeled back to the commit.","name":"id"}],"sig":"git_commit **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Lookup a commit object from a repository. The generated commit object is owned by the revision repo and shall not be freed by the user.","comments":""},"git_commit_tree":{"argline":"git_commit *commit","line":89,"group":"commit","lineto":94,"file":"commit.h","rawComments":"\n Get the tree pointed to by a commit.\n @param commit a previously loaded commit.\n @return the tree of a commit\n\n","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"sig":"git_commit *","return":{"type":"const git_tree *","comment":"the tree of a commit"},"description":"Get the tree pointed to by a commit.","comments":""},"git_obj_hash":{"argline":"git_oid *id, git_rawobj *obj","line":173,"group":"obj","lineto":185,"file":"odb.h","rawComments":"\n Determine the object-ID (sha1 hash) of the given git_rawobj.\n\n The input obj must be a valid loose object type and the data\n pointer must not be NULL, unless the len field is also zero.\n\n @param id the resulting object-ID.\n @param obj the object whose hash is to be determined.\n @return\n - GIT_SUCCESS if the object-ID was correctly determined.\n - GIT_ERROR if the given object is malformed.\n\n","args":[{"type":"git_oid *","comment":"the resulting object-ID.","name":"id"},{"type":"git_rawobj *","comment":"the object whose hash is to be determined.","name":"obj"}],"sig":"git_oid *::git_rawobj *","return":{"type":"int","comment":""},"description":"Determine the object-ID (sha1 hash) of the given git_rawobj.","comments":"The input obj must be a valid loose object type and the data\n pointer must not be NULL, unless the len field is also zero.\n\n @return\n - GIT_SUCCESS if the object-ID was correctly determined.\n - GIT_ERROR if the given object is malformed."},"git_tree_entry_id":{"argline":"git_tree_entry *entry","line":94,"group":"tree","lineto":99,"file":"tree.h","rawComments":"\n Get the id of the object pointed by the entry\n @param entry a tree entry\n @return the oid of the object\n\n","args":[{"type":"git_tree_entry *","comment":"a tree entry","name":"entry"}],"sig":"git_tree_entry *","return":{"type":"const git_oid *","comment":"the oid of the object"},"description":"Get the id of the object pointed by the entry","comments":""},"git_tag_name":{"argline":"git_tag *t","line":67,"group":"tag","lineto":72,"file":"tag.h","rawComments":"\n Get the name of a tag\n @param tag a previously loaded tag.\n @return name of the tag\n\n","args":[{"type":"git_tag *","comment":"","name":"t"}],"sig":"git_tag *","return":{"type":"const char *","comment":"name of the tag"},"description":"Get the name of a tag @param tag a previously loaded tag.","comments":""},"git_tag_new":{"argline":"git_tag **tag, git_repository *repo","line":33,"group":"tag","lineto":44,"file":"tag.h","rawComments":"\n Create a new in-memory git_tag.\n\n The tag object must be manually filled using\n setter methods before it can be written to its\n repository.\n\n @param tag pointer to the new tag\n @param repo The repository where the object will reside\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_tag **","comment":"pointer to the new tag","name":"tag"},{"type":"git_repository *","comment":"The repository where the object will reside","name":"repo"}],"sig":"git_tag **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new in-memory git_tag.","comments":"The tag object must be manually filled using\n setter methods before it can be written to its\n repository."},"git_revwalk_push":{"argline":"git_revwalk *walk, git_commit *commit","line":63,"group":"revwalk","lineto":70,"file":"revwalk.h","rawComments":"\n Mark a commit to start traversal from.\n The commit object must belong to the repo which is being walked through.\n\n @param walker the walker being used for the traversal.\n @param commit the commit to start from.\n\n","args":[{"type":"git_revwalk *","comment":"","name":"walk"},{"type":"git_commit *","comment":"the commit to start from.","name":"commit"}],"sig":"git_revwalk *::git_commit *","return":{"type":"int","comment":""},"description":"Mark a commit to start traversal from. The commit object must belong to the repo which is being walked through.","comments":"@param walker the walker being used for the traversal."},"git_repository_free":{"argline":"git_repository *repo","line":163,"group":"repository","lineto":167,"file":"repository.h","rawComments":"\n Free a previously allocated repository\n @param repo repository handle to close. If NULL nothing occurs.\n\n","args":[{"type":"git_repository *","comment":"repository handle to close. If NULL nothing occurs.","name":"repo"}],"sig":"git_repository *","return":{"type":"void","comment":""},"description":"Free a previously allocated repository","comments":""},"git_oid_mkstr":{"argline":"git_oid *out, const char *str","line":28,"group":"oid","lineto":36,"file":"oid.h","rawComments":"\n Parse a hex formatted object id into a git_oid.\n @param out oid structure the result is written into.\n @param str input hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes).\n @return GIT_SUCCESS if valid; GIT_ENOTOID on failure.\n\n","args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const char *","comment":"input hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (40 bytes).","name":"str"}],"sig":"git_oid *::const char *","return":{"type":"int","comment":"GIT_SUCCESS if valid; GIT_ENOTOID on failure."},"description":"Parse a hex formatted object id into a git_oid.","comments":""},"git_index_get":{"argline":"git_index *index, int n","line":149,"group":"index","lineto":159,"file":"index.h","rawComments":"\n Get a pointer to one of the entries in the index\n\n This entry can be modified, and the changes will be written\n back to disk on the next write() call.\n\n @param index an existing index object\n @param n the position of the entry\n @return a pointer to the entry; NULL if out of bounds\n\n","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"int","comment":"the position of the entry","name":"n"}],"sig":"git_index *::int","return":{"type":"git_index_entry *","comment":"a pointer to the entry; NULL if out of bounds"},"description":"Get a pointer to one of the entries in the index","comments":"This entry can be modified, and the changes will be written\n back to disk on the next write() call."},"git_oid_cmp":{"argline":"const git_oid *a, const git_oid *b","line":109,"group":"oid","lineto":118,"file":"oid.h","rawComments":"\n Compare two oid structures.\n @param a first oid structure.\n @param b second oid structure.\n @return <0, 0, >0 if a < b, a == b, a > b.\n\n","args":[{"type":"const git_oid *","comment":"first oid structure.","name":"a"},{"type":"const git_oid *","comment":"second oid structure.","name":"b"}],"sig":"const git_oid *::const git_oid *","return":{"type":"int","comment":"<0, 0, >0 if a < b, a == b, a > b."},"description":"Compare two oid structures.","comments":""},"git_repository_lookup":{"argline":"git_object **object, git_repository *repo, const git_oid *id, git_otype type","line":44,"group":"repository","lineto":61,"file":"repository.h","rawComments":"\n Lookup a reference to one of the objects in the repostory.\n\n The generated reference is owned by the repository and\n should not be freed by the user.\n\n The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type.\n\n @param object pointer to the looked-up object\n @param repo the repository to look up the object\n @param id the unique identifier for the object\n @param type the type of the object\n @return a reference to the object\n\n","args":[{"type":"git_object **","comment":"pointer to the looked-up object","name":"object"},{"type":"git_repository *","comment":"the repository to look up the object","name":"repo"},{"type":"const git_oid *","comment":"the unique identifier for the object","name":"id"},{"type":"git_otype","comment":"the type of the object","name":"type"}],"sig":"git_object **::git_repository *::const git_oid *::git_otype","return":{"type":"int","comment":"a reference to the object"},"description":"Lookup a reference to one of the objects in the repostory.","comments":"The generated reference is owned by the repository and\n should not be freed by the user.\n\n The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type."},"git_object_type":{"argline":"git_object *obj","line":133,"group":"object","lineto":139,"file":"repository.h","rawComments":"\n Get the object type of an object\n\n @param obj the repository object\n @return the object's type\n\n","args":[{"type":"git_object *","comment":"the repository object","name":"obj"}],"sig":"git_object *","return":{"type":"git_otype","comment":"the object's type"},"description":"Get the object type of an object","comments":""},"git_index_entrycount":{"argline":"git_index *index","line":161,"group":"index","lineto":167,"file":"index.h","rawComments":"\n Get the count of entries currently in the index\n\n @param index an existing index object\n @return integer of count of current entries\n\n","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"sig":"git_index *","return":{"type":"unsigned int","comment":"integer of count of current entries"},"description":"Get the count of entries currently in the index","comments":""},"git_tree_id":{"argline":"git_tree *tree","line":49,"group":"tree","lineto":54,"file":"tree.h","rawComments":"\n Get the id of a tree.\n @param tree a previously loaded tree.\n @return object identity for the tree.\n\n","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"}],"sig":"git_tree *","return":{"type":"const git_oid *","comment":"object identity for the tree."},"description":"Get the id of a tree.","comments":""},"git_revwalk_hide":{"argline":"git_revwalk *walk, git_commit *commit","line":72,"group":"revwalk","lineto":77,"file":"revwalk.h","rawComments":"\n Mark a commit (and its ancestors) uninteresting for the output.\n @param walker the walker being used for the traversal.\n @param commit the commit that will be ignored during the traversal\n\n","args":[{"type":"git_revwalk *","comment":"","name":"walk"},{"type":"git_commit *","comment":"the commit that will be ignored during the traversal","name":"commit"}],"sig":"git_revwalk *::git_commit *","return":{"type":"int","comment":""},"description":"Mark a commit (and its ancestors) uninteresting for the output. @param walker the walker being used for the traversal.","comments":""},"git_blob_set_rawcontent":{"argline":"git_blob *blob, const void *buffer, size_t len","line":54,"group":"blob","lineto":63,"file":"blob.h","rawComments":"\n Fill a blob with the contents inside\n the pointed buffer\n\n @param blob pointer to the blob\n @param buffer buffer with the contents for the blob\n @param len size of the buffer\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_blob *","comment":"pointer to the blob","name":"blob"},{"type":"const void *","comment":"buffer with the contents for the blob","name":"buffer"},{"type":"size_t","comment":"size of the buffer","name":"len"}],"sig":"git_blob *::const void *::size_t","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Fill a blob with the contents inside the pointed buffer","comments":""},"git_commit_set_author":{"argline":"git_commit *commit, const char *name, const char *email, time_t time","line":119,"group":"commit","lineto":126,"file":"commit.h","rawComments":"\n Set the author of a commit\n @param commit the commit object\n @param name name of the new author\n @param email email of the new author\n @param time time when the author created the commit\n\n","args":[{"type":"git_commit *","comment":"the commit object","name":"commit"},{"type":"const char *","comment":"name of the new author","name":"name"},{"type":"const char *","comment":"email of the new author","name":"email"},{"type":"time_t","comment":"time when the author created the commit","name":"time"}],"sig":"git_commit *::const char *::const char *::time_t","return":{"type":"void","comment":""},"description":"Set the author of a commit","comments":""},"git_blob_new":{"argline":"git_blob **blob, git_repository *repo","line":31,"group":"blob","lineto":42,"file":"blob.h","rawComments":"\n Create a new in-memory git_blob.\n\n The blob object must be manually filled using\n the 'set_rawcontent' methods before it can\n be written back to disk.\n\n @param blob pointer to the new blob\n @param repo The repository where the object will reside\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_blob **","comment":"pointer to the new blob","name":"blob"},{"type":"git_repository *","comment":"The repository where the object will reside","name":"repo"}],"sig":"git_blob **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new in-memory git_blob.","comments":"The blob object must be manually filled using\n the 'set_rawcontent' methods before it can\n be written back to disk."},"git_blob_rawsize":{"argline":"git_blob *blob","line":78,"group":"blob","lineto":84,"file":"blob.h","rawComments":"\n Get the size in bytes of the contents of a blob\n\n @param blob pointer to the blob\n @return size on bytes\n\n","args":[{"type":"git_blob *","comment":"pointer to the blob","name":"blob"}],"sig":"git_blob *","return":{"type":"int","comment":"size on bytes"},"description":"Get the size in bytes of the contents of a blob","comments":""},"git_commit_id":{"argline":"git_commit *commit","line":47,"group":"commit","lineto":52,"file":"commit.h","rawComments":"\n Get the id of a commit.\n @param commit a previously loaded commit.\n @return object identity for the commit.\n\n","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"sig":"git_commit *","return":{"type":"const git_oid *","comment":"object identity for the commit."},"description":"Get the id of a commit.","comments":""},"git_tree_entry_byname":{"argline":"git_tree *tree, const char *filename","line":64,"group":"tree","lineto":70,"file":"tree.h","rawComments":"\n Lookup a tree entry by its filename\n @param tree a previously loaded tree.\n @param filename the filename of the desired entry\n @return the tree entry; NULL if not found\n\n","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"},{"type":"const char *","comment":"the filename of the desired entry","name":"filename"}],"sig":"git_tree *::const char *","return":{"type":"git_tree_entry *","comment":"the tree entry; NULL if not found"},"description":"Lookup a tree entry by its filename","comments":""},"git_tag_type":{"argline":"git_tag *t","line":60,"group":"tag","lineto":65,"file":"tag.h","rawComments":"\n Get the type of a tag's tagged object\n @param tag a previously loaded tag.\n @return type of the tagged object\n\n","args":[{"type":"git_tag *","comment":"","name":"t"}],"sig":"git_tag *","return":{"type":"git_otype","comment":"type of the tagged object"},"description":"Get the type of a tag's tagged object @param tag a previously loaded tag.","comments":""},"git_revwalk_new":{"argline":"git_revwalk **walker, git_repository *repo","line":48,"group":"revwalk","lineto":55,"file":"revwalk.h","rawComments":"\n Allocate a new revision walker to iterate through a repo.\n\n @param walker pointer to the new revision walker\n @param repo the repo to walk through\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_revwalk **","comment":"pointer to the new revision walker","name":"walker"},{"type":"git_repository *","comment":"the repo to walk through","name":"repo"}],"sig":"git_revwalk **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Allocate a new revision walker to iterate through a repo.","comments":""},"git_odb_write":{"argline":"git_oid *id, git_odb *db, git_rawobj *obj","line":118,"group":"odb","lineto":128,"file":"odb.h","rawComments":"\n Write an object to the database.\n\n @param id identity of the object written.\n @param db database to which the object should be written.\n @param obj object descriptor for the object to write.\n @return\n - GIT_SUCCESS if the object was written;\n - GIT_ERROR otherwise.\n\n","args":[{"type":"git_oid *","comment":"identity of the object written.","name":"id"},{"type":"git_odb *","comment":"database to which the object should be written.","name":"db"},{"type":"git_rawobj *","comment":"object descriptor for the object to write.","name":"obj"}],"sig":"git_oid *::git_odb *::git_rawobj *","return":{"type":"int","comment":""},"description":"Write an object to the database.","comments":"@return\n - GIT_SUCCESS if the object was written;\n - GIT_ERROR otherwise."},"git_repository_newobject":{"argline":"git_object **object, git_repository *repo, git_otype type","line":80,"group":"repository","lineto":101,"file":"repository.h","rawComments":"\n Create a new in-memory repository object with\n the given type.\n\n The object's attributes can be filled in using the\n corresponding setter methods.\n\n The object will be written back to given git_repository\n when the git_object_write() function is called; objects\n cannot be written to disk until all their main\n attributes have been properly filled.\n\n Objects are instantiated with no SHA1 id; their id\n will be automatically generated when writing to the\n repository.\n\n @param object pointer to the new object\n @parem repo Repository where the object belongs\n @param type Type of the object to be created\n @return the new object\n\n","args":[{"type":"git_object **","comment":"pointer to the new object","name":"object"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"git_otype","comment":"Type of the object to be created","name":"type"}],"sig":"git_object **::git_repository *::git_otype","return":{"type":"int","comment":"the new object"},"description":"Create a new in-memory repository object with the given type.","comments":"The object's attributes can be filled in using the\n corresponding setter methods.\n\n The object will be written back to given git_repository\n when the git_object_write() function is called; objects\n cannot be written to disk until all their main\n attributes have been properly filled.\n\n Objects are instantiated with no SHA1 id; their id\n will be automatically generated when writing to the\n repository.\n\n @parem repo Repository where the object belongs"},"git_index_clear":{"argline":"git_index *index","line":73,"group":"index","lineto":80,"file":"index.h","rawComments":"\n Clear the contents (all the entries) of an index object.\n This clears the index object in memory; changes must be manually\n written to disk for them to take effect.\n\n @param index an existing index object\n\n","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"sig":"git_index *","return":{"type":"void","comment":""},"description":"Clear the contents (all the entries) of an index object. This clears the index object in memory; changes must be manually written to disk for them to take effect.","comments":""},"git_tree_add_entry":{"argline":"git_tree *tree, const git_oid *id, const char *filename, int attributes","line":110,"group":"tree","lineto":122,"file":"tree.h","rawComments":"\n Add a new entry to a tree.\n\n This will mark the tree as modified; the new entry will\n be written back to disk on the next git_object_write()\n\n @param tree Tree object to store the entry\n @iparam id OID for the tree entry\n @param filename Filename for the tree entry\n @param attributes UNIX file attributes for the entry\n @return 0 on success; otherwise error code\n\n","args":[{"type":"git_tree *","comment":"Tree object to store the entry","name":"tree"},{"type":"const git_oid *","comment":"","name":"id"},{"type":"const char *","comment":"Filename for the tree entry","name":"filename"},{"type":"int","comment":"UNIX file attributes for the entry","name":"attributes"}],"sig":"git_tree *::const git_oid *::const char *::int","return":{"type":"int","comment":"0 on success; otherwise error code"},"description":"Add a new entry to a tree.","comments":"This will mark the tree as modified; the new entry will\n be written back to disk on the next git_object_write()\n\n @iparam id OID for the tree entry"},"git_tree_new":{"argline":"git_tree **tree, git_repository *repo","line":36,"group":"tree","lineto":47,"file":"tree.h","rawComments":"\n Create a new in-memory git_tree.\n\n The tree object must be manually filled using\n setter methods before it can be written to its\n repository.\n\n @param tree pointer to the new tree\n @param repo The repository where the object will reside\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_tree **","comment":"pointer to the new tree","name":"tree"},{"type":"git_repository *","comment":"The repository where the object will reside","name":"repo"}],"sig":"git_tree **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new in-memory git_tree.","comments":"The tree object must be manually filled using\n setter methods before it can be written to its\n repository."},"git_revwalk_reset":{"argline":"git_revwalk *walker","line":57,"group":"revwalk","lineto":61,"file":"revwalk.h","rawComments":"\n Reset the walking machinery for reuse.\n @param walker handle to reset.\n\n","args":[{"type":"git_revwalk *","comment":"handle to reset.","name":"walker"}],"sig":"git_revwalk *","return":{"type":"void","comment":""},"description":"Reset the walking machinery for reuse.","comments":""},"git_odb__read_loose":{"argline":"git_rawobj *out, git_odb *db, const git_oid *id","line":104,"group":"odb","lineto":116,"file":"odb.h","rawComments":"\n Read an object from the database using only loose object files.\n\n If GIT_ENOTFOUND then out->data is set to NULL.\n\n @param out object descriptor to populate upon reading.\n @param db database to search for the object in.\n @param id identity of the object to read.\n @return\n - GIT_SUCCESS if the object was read.\n - GIT_ENOTFOUND if the object is not in the database.\n\n","args":[{"type":"git_rawobj *","comment":"object descriptor to populate upon reading.","name":"out"},{"type":"git_odb *","comment":"database to search for the object in.","name":"db"},{"type":"const git_oid *","comment":"identity of the object to read.","name":"id"}],"sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":""},"description":"Read an object from the database using only loose object files.","comments":"If GIT_ENOTFOUND then out->data is set to NULL.\n\n @return\n - GIT_SUCCESS if the object was read.\n - GIT_ENOTFOUND if the object is not in the database."},"git_commit_author":{"argline":"git_commit *commit","line":82,"group":"commit","lineto":87,"file":"commit.h","rawComments":"\n Get the author of a commit.\n @param commit a previously loaded commit.\n @return the author of a commit\n\n","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"sig":"git_commit *","return":{"type":"const git_person *","comment":"the author of a commit"},"description":"Get the author of a commit.","comments":""},"git_commit_set_tree":{"argline":"git_commit *commit, git_tree *tree","line":128,"group":"commit","lineto":133,"file":"commit.h","rawComments":"\n Set the tree which is pointed to by a commit\n @param commit the commit object\n @param tree the new tree\n\n","args":[{"type":"git_commit *","comment":"the commit object","name":"commit"},{"type":"git_tree *","comment":"the new tree","name":"tree"}],"sig":"git_commit *::git_tree *","return":{"type":"void","comment":""},"description":"Set the tree which is pointed to by a commit","comments":""},"git_tree_lookup":{"argline":"git_tree **tree, git_repository *repo, const git_oid *id","line":24,"group":"tree","lineto":34,"file":"tree.h","rawComments":"\n Lookup a tree object from the repository.\n The generated tree object is owned by the revision\n repo and shall not be freed by the user.\n\n @param tree pointer to the looked up tree\n @param repo the repo to use when locating the tree.\n @param id identity of the tree to locate.\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_tree **","comment":"pointer to the looked up tree","name":"tree"},{"type":"git_repository *","comment":"the repo to use when locating the tree.","name":"repo"},{"type":"const git_oid *","comment":"identity of the tree to locate.","name":"id"}],"sig":"git_tree **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Lookup a tree object from the repository. The generated tree object is owned by the revision repo and shall not be freed by the user.","comments":""},"git_tag_lookup":{"argline":"git_tag **tag, git_repository *repo, const git_oid *id","line":21,"group":"tag","lineto":31,"file":"tag.h","rawComments":"\n Lookup a tag object from the repository.\n The generated tag object is owned by the revision\n repo and shall not be freed by the user.\n\n @param tag pointer to the looked up tag\n @param repo the repo to use when locating the tag.\n @param id identity of the tag to locate.\n @return 0 on success; error code otherwise\n\n","args":[{"type":"git_tag **","comment":"pointer to the looked up tag","name":"tag"},{"type":"git_repository *","comment":"the repo to use when locating the tag.","name":"repo"},{"type":"const git_oid *","comment":"identity of the tag to locate.","name":"id"}],"sig":"git_tag **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Lookup a tag object from the repository. The generated tag object is owned by the revision repo and shall not be freed by the user.","comments":""},"git_index_free":{"argline":"git_index *index","line":82,"group":"index","lineto":87,"file":"index.h","rawComments":"\n Free an existing index object.\n\n @param index an existing index object\n\n","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"sig":"git_index *","return":{"type":"void","comment":""},"description":"Free an existing index object.","comments":""},"git_index_remove":{"argline":"git_index *index, int position","line":127,"group":"index","lineto":134,"file":"index.h","rawComments":"\n Remove an entry from the index\n\n @param index an existing index object\n @param position position of the entry to remove\n @return 0 on success, otherwise an error code\n\n","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"int","comment":"position of the entry to remove","name":"position"}],"sig":"git_index *::int","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"Remove an entry from the index","comments":""},"git_index_insert":{"argline":"git_index *index, const git_index_entry *source_entry","line":136,"group":"index","lineto":147,"file":"index.h","rawComments":"\n Insert an entry into the index.\n A full copy (including the 'path' string) of the given\n 'source_entry' will be inserted on the index; if the index\n already contains an entry for the same path, the entry\n will be updated.\n\n @param index an existing index object\n @param source_entry new entry object\n @return 0 on success, otherwise an error code\n\n","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const git_index_entry *","comment":"new entry object","name":"source_entry"}],"sig":"git_index *::const git_index_entry *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"Insert an entry into the index. A full copy (including the 'path' string) of the given 'source_entry' will be inserted on the index; if the index already contains an entry for the same path, the entry will be updated.","comments":""},"git_commit_committer":{"argline":"git_commit *commit","line":75,"group":"commit","lineto":80,"file":"commit.h","rawComments":"\n Get the committer of a commit.\n @param commit a previously loaded commit.\n @return the committer of a commit\n\n","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"sig":"git_commit *","return":{"type":"const git_person *","comment":"the committer of a commit"},"description":"Get the committer of a commit.","comments":""},"git_odb_close":{"argline":"git_odb *db","line":30,"group":"odb","lineto":34,"file":"odb.h","rawComments":"\n Close an open object database.\n @param db database pointer to close.  If NULL no action is taken.\n\n","args":[{"type":"git_odb *","comment":"database pointer to close.  If NULL no action is taken.","name":"db"}],"sig":"git_odb *","return":{"type":"void","comment":""},"description":"Close an open object database.","comments":""},"git_obj_type_to_string":{"argline":"git_otype type","line":145,"group":"obj","lineto":154,"file":"odb.h","rawComments":"\n Convert an object type to it's string representation.\n\n The result is a pointer to a string in static memory and\n should not be free()'ed.\n\n @param type object type to convert.\n @return the corresponding string representation.\n\n","args":[{"type":"git_otype","comment":"object type to convert.","name":"type"}],"sig":"git_otype","return":{"type":"const char *","comment":"the corresponding string representation."},"description":"Convert an object type to it's string representation.","comments":"The result is a pointer to a string in static memory and\n should not be free()'ed."},"git_odb_read_header":{"argline":"git_rawobj *out, git_odb *db, const git_oid *id","line":71,"group":"odb","lineto":88,"file":"odb.h","rawComments":"\n Read the header of an object from the database, without\n reading its full contents.\n\n Only the 'type' and 'len' fields of the git_rawobj structure\n are filled. The 'data' pointer will always be NULL.\n\n The raw object pointed by 'out' doesn't need to be manually\n closed with git_obj_close().\n\n @param out object descriptor to populate upon reading.\n @param db database to search for the object in.\n @param id identity of the object to read.\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.\n\n","args":[{"type":"git_rawobj *","comment":"object descriptor to populate upon reading.","name":"out"},{"type":"git_odb *","comment":"database to search for the object in.","name":"db"},{"type":"const git_oid *","comment":"identity of the object to read.","name":"id"}],"sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":""},"description":"Read the header of an object from the database, without reading its full contents.","comments":"Only the 'type' and 'len' fields of the git_rawobj structure\n are filled. The 'data' pointer will always be NULL.\n\n The raw object pointed by 'out' doesn't need to be manually\n closed with git_obj_close().\n\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."},"git_tree_entry_attributes":{"argline":"git_tree_entry *entry","line":80,"group":"tree","lineto":85,"file":"tree.h","rawComments":"\n Get the UNIX file attributes of a tree entry\n @param entry a tree entry\n @return attributes as an integer\n\n","args":[{"type":"git_tree_entry *","comment":"a tree entry","name":"entry"}],"sig":"git_tree_entry *","return":{"type":"unsigned int","comment":"attributes as an integer"},"description":"Get the UNIX file attributes of a tree entry","comments":""},"git_commit_time":{"argline":"git_commit *commit","line":68,"group":"commit","lineto":73,"file":"commit.h","rawComments":"\n Get the commit time (i.e. committer time) of a commit.\n @param commit a previously loaded commit.\n @return the time of a commit\n\n","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"sig":"git_commit *","return":{"type":"time_t","comment":"the time of a commit"},"description":"Get the commit time (i.e. committer time) of a commit.","comments":""},"__attribute__":{"argline":"(visibility(\"default\"))","line":26,"lineto":31,"file":"common.h","rawComments":" Declare a public TLS symbol exported for application use. ","args":[{"type":"","comment":"","name":"(visibility(\"default\"))"}],"sig":"","return":{"type":"","comment":""},"description":"Declare a public TLS symbol exported for application use.","comments":""},"git_odb_read":{"argline":"git_rawobj *out, git_odb *db, const git_oid *id","line":57,"group":"odb","lineto":69,"file":"odb.h","rawComments":"\n Read an object from the database.\n\n If GIT_ENOTFOUND then out->data is set to NULL.\n\n @param out object descriptor to populate upon reading.\n @param db database to search for the object in.\n @param id identity of the object to read.\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.\n\n","args":[{"type":"git_rawobj *","comment":"object descriptor to populate upon reading.","name":"out"},{"type":"git_odb *","comment":"database to search for the object in.","name":"db"},{"type":"const git_oid *","comment":"identity of the object to read.","name":"id"}],"sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":""},"description":"Read an object from the database.","comments":"If GIT_ENOTFOUND then out->data is set to NULL.\n\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."},"git_oid_mkraw":{"argline":"git_oid *out, const unsigned char *raw","line":38,"group":"oid","lineto":46,"file":"oid.h","rawComments":"\n Copy an already raw oid into a git_oid structure.\n @param out oid structure the result is written into.\n @param raw the raw input bytes to be copied.\n\n","args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const unsigned char *","comment":"the raw input bytes to be copied.","name":"raw"}],"sig":"git_oid *::const unsigned char *","return":{"type":"void","comment":""},"description":"Copy an already raw oid into a git_oid structure.","comments":""},"git_tree_entry_set_name":{"argline":"git_tree_entry *entry, const char *name","line":161,"group":"tree","lineto":170,"file":"tree.h","rawComments":"\n Change the filename of a tree entry.\n\n This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()\n\n @param entry Entry object which will be modified\n @param oid new filename for the entry\n\n","args":[{"type":"git_tree_entry *","comment":"Entry object which will be modified","name":"entry"},{"type":"const char *","comment":"","name":"name"}],"sig":"git_tree_entry *::const char *","return":{"type":"void","comment":""},"description":"Change the filename of a tree entry.","comments":"This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()\n\n @param oid new filename for the entry"},"git_tree_entry_name":{"argline":"git_tree_entry *entry","line":87,"group":"tree","lineto":92,"file":"tree.h","rawComments":"\n Get the filename of a tree entry\n @param entry a tree entry\n @return the name of the file\n\n","args":[{"type":"git_tree_entry *","comment":"a tree entry","name":"entry"}],"sig":"git_tree_entry *","return":{"type":"const char *","comment":"the name of the file"},"description":"Get the filename of a tree entry","comments":""},"git_tree_entrycount":{"argline":"git_tree *tree","line":57,"group":"tree","lineto":62,"file":"tree.h","rawComments":"\n Get the number of entries listed in a tree\n @param tree a previously loaded tree.\n @return the number of entries in the tree\n\n","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"}],"sig":"git_tree *","return":{"type":"size_t","comment":"the number of entries in the tree"},"description":"Get the number of entries listed in a tree","comments":""},"git_oid_pathfmt":{"argline":"char *str, const git_oid *oid","line":59,"group":"oid","lineto":72,"file":"oid.h","rawComments":"\n Format a git_oid into a loose-object path string.\n <p>\n The resulting string is \"aa/...\", where \"aa\" is the first two\n hex digitis of the oid and \"...\" is the remaining 38 digits.\n\n @param str output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (41 bytes).  Only the\n        oid digits are written; a '\\\\0' terminator must be added\n        by the caller if it is required.\n @param oid oid structure to format.\n\n","args":[{"type":"char *","comment":"output hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (41 bytes).  Only the         oid digits are written; a '\\\\0' terminator must be added         by the caller if it is required.","name":"str"},{"type":"const git_oid *","comment":"oid structure to format.","name":"oid"}],"sig":"char *::const git_oid *","return":{"type":"void","comment":""},"description":"Format a git_oid into a loose-object path string. <p> The resulting string is \"aa/...\", where \"aa\" is the first two hex digitis of the oid and \"...\" is the remaining 38 digits.","comments":""},"git_repository_index":{"argline":"git_repository *rpeo","line":71,"group":"repository","lineto":78,"file":"repository.h","rawComments":"\n Get the Index file of a Git repository\n\n @param repo a repository object\n @return a pointer to the Index object;\n\tNULL if the index cannot be opened\n\n","args":[{"type":"git_repository *","comment":"","name":"rpeo"}],"sig":"git_repository *","return":{"type":"git_index *","comment":"a pointer to the Index object;  NULL if the index cannot be opened"},"description":"Get the Index file of a Git repository","comments":"@param repo a repository object"}}}